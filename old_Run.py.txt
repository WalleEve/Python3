"""name = input("Enter your name ") # character
marks = input("Enter your mark: ") # number
print(name)
print(marks)
print(type(name)) # str
print(type(marks)) # number / int
print(marks + 10)
print(name)"""

"""

a = "12345678910"
print(a[-1:-5])


name = "Jean-luc Picard"
name.lower()
print(name)
print(name.lower())


name = "Jean-luc Picard   "
print(name)
print(len(name.rstrip()))
print(len(name))
"""
"""

STRING PROPEERTIES:
1. String contains character
2. string have length
3. Charactrer in string appear in a sequence

# LENGTH
len()

print(len("hello"))


name2 = input("Enter your name: ")
print(name2)
print(len(name2))
name_length = len(name2)
print(name_length)




alphnum = "123"
print(alphnum)
print(len(alphnum))

'abd'
"abc"

' '
" "
' "
"""

print("Hello")



"""name = input("Enter your name ") # character
marks = input("Enter your mark: ") # number
print(name)
print(marks)
print(type(name)) # str
print(type(marks)) # number / int
print(marks + 10)
print(name)"""

"""

a = "12345678910"
print(a[-1:-5])


name = "Jean-luc Picard"
name.lower()
print(name)
print(name.lower())


name = "Jean-luc Picard   "
print(name)
print(len(name.rstrip()))
print(len(name))
"""
"""

STRING PROPEERTIES:
1. String contains character
2. string have length
3. Charactrer in string appear in a sequence

# LENGTH
len()

print(len("hello"))


name2 = input("Enter your name: ")
print(name2)
print(len(name2))
name_length = len(name2)
print(name_length)




alphnum = "123"
print(alphnum)
print(len(alphnum))

'abd'
"abc"

' '
" "
' "



name = "acer"
name : variable / identifier

Python identifiers



# RESERVED WORDS:

. True False None
. and, or, not, is
. if elif else
. while, for, break, continue, return, in, yield
. try, except, finally, raise, assert
. import, from, as, class, def, pass, global, nonlocal, lambda, del, with


# DATA TYPES / Built In OBJECT

NUMBER : 123, 3.123, 3+4j, Decimal, Fraction

STRING: 'acer', "acer", "acer'a", ' brand "acer" ', "123", "a/x01@"

LIST : [1] , ["acer"], ["a", "b", "c"], [a, [a, b, c], d]

DICTIONARY: {"food": 'spam', 'test':'yum'}, {'food':["a", "b", "c"]}

TUPLE: ("hello", "acer", "acb"), ('food', ("a", "b", "c"))

FILES: myfile = open("egg", "r")

SET: set("abc"), {"a", "b", "c"}

BOOLEAN: True, False, None
None: None



a = "hello"
a = "hello
acer "


"""

a = "hello \
Python \
              Tutorial"

#print(a)

""" Hello
Pthon
Tutorial"""

"""
 print hello
 Python

print(b) # print
print(c)


Arith Opt: + , _ , * , /

+
*


# + (Join)
a = "hello"
b = "Python"
print(a, b)
print(a + b)
print(a + " " + b)

c = a, b
print(c)
d = a + ' ' + b
print(d)

# *
a = "Python"
print(a)
print(a)
print(a)
print(a)
print(a)

a = a + ' '
print(a * 5)
print((a + ' ') * 5)


# STRING INDEX and SLICING

name = "ACER"
#identifier_name/ variable_name[1]

#any programming language: index start woth 0 
print(name[1])
print(name[0])

last_index = len(name) - 1
print(last_index)
print(name[last_index])


L | E | N | O | V | O   len = 6
0   1   2   3   4   5

name = "LENOVO"
print(name[len(name)-2])

-index number


  L  | E |  N  |  O  |  V  |  O 
 -6   -5   -4    -3    -2    -1


name = "12345" 
print(name[4])

# SLICING: SUBSTRING "LAPTOP BRAND LENOVO"

varibale = "value"
varibale_name[start_index:end_index]
variable_name[:end_index] # start_index default 0
varibale_name[start_ndx:] # end_index default last_index number
 
|  L  |  E  |  N  |  O  |  V  |  O  |
0     1     2     3     4     5     6


|  L  |  E  |  N  |  O  |  V  |  O  |
-6   -5    -4    -3    -2    -1     


name = "LENOVO"
print(name[0:3])
print(name[:])
print(name[1:9])
print(len(name[1:9]))
print(name[3:4])
print(name[:6])



print(name[-6:-2])
print(name[-2:-6])

print(name[6:4])

print(name[-100:]) # None


 function
 method
def
calss
 def 

print("hello")
.print()

len()

# STRING INBUILT METHOD

# UPPER / LOWER

name = " Lenovo " # camel case
print(name.lower())
name2 = name.lower()
print(name2)
print(name)


name = "Lenovo" # camel case
print(name.upper())
name2 = name.upper()
print(name2)
print(name)

+919898976564+91


lstrip
rstrip
strip


name = "   LENOVO   "
print(len(name)) # 12

print(name.lstrip()) # defailt space will be considered 
print(len(name.lstrip()))

print(len(name)) # 12

print(name.rstrip()) # defailt space will be considered 
print(len(name.rstrip()))

print(name.strip()) # defailt space will be considered 
print(len(name.strip()))

phone = "+91 9696392244+91"
print(phone.lstrip("+91"))
print(phone.rstrip("+91"))
print(phone.strip("+91").strip().strip())

# IMMUTABLE

name = "LENOVO"
print(name[1]) # E
name ="O"
print(name)


# NUMBER




num = input("Enter number: ")
print(int(num))
print(float(num))

"""


def vid():
    open winmp

test()

class A:
    def test()
    


class Laptop:
    def edit():
        open notepad
    def vid():
        open vlc

        
car


class car:
    
    
    def move():
        drive forward
    def move_back():
        drive back
    def numsic():
        paly music
    def tyre():
        number of tyres

        
farari = car()
farari.move()


 edit()

 object

 mylaptop = Laptop()

 mylaptop.edit() 

 vid()



 # STRIP:

 name = " LENOVO "
 name2 = "LENOVO"

 name.strip() # default remove space from 

 strip(name)
 lstrip()
 rstrip()




"""# STRING IMMUTABLE:
name = "LENOVO"
print(name[1])


print(name)

name2 = name[0] + 'I' + name[2:]

print(name2)


Memory:

name = "a"

name2 = 'a'

name3 = "a"

class str 

id()

name : "LENOVO"
memory location: 2315404857072

name2 = "LENOVO"
2315404857072


>>> name = "Lenovo"
>>> id(name)
2315404043952

 
 E n terprise
0 1 2

# START OR END

.startswith()
.endswith()\


# String Index for Slice
  |  E   |  n   |  t   |  e   |  r  |  p  |  r  |  i  |  s  |  e  |
-10     -9     -8     -7     -6    -5    -4    -3    -2    -1


  |  E   |  n   |  t   |  e   |  r  |  p  |  r  |  i  |  s  |  e  |
     0      1      2      3      4     5     6     7     8     9   

name = "Enterprise"
print(name.startswith('en')) # False
print(name.startswith('En')) # True

print(name[0:2])
print(name[0:] == 'En')

print(name.endswith('ise')) # True
print(name[-1:-3] == 'ise')
print(name[-3:])
print(name[-3:] == 'ise')

print(name[7]+ name[8] + name[9] == 'ise')


# USER INPUT:

at Run time to get input from the user we can use input() function
"""

name = input("Enter your name: ")
print("You have entered " + name)

Note: default data type string 


# Interact With input()
"""
phone = input("> ")
print("You have enterted: " + phone)
print(type(phone))

# string: '' / ""



num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " + f_mark)
print(type(f_mark))

num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " , f_mark)
print(type(f_mark))


num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " + f_mark)
print(type(f_mark))

num = input("Marks: ")
f_mark = (num , "2")
print(type(f_mark))
print("Your final mark is : " , f_mark)



name = input("name: ")
age = input("age")
print("Your name is " + name + " and you are " + age + " yers old.")

name = input("name: ")
age = input("age")
print("Your name is", name,"and you are" , age , "yers old.")



# int()
to convert any real number if it is in string type then by usig int() function we can convert it to integer data type



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : " , f_mark)
print(type(f_mark))



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : " + str(f_mark))
print(type(f_mark))


# float 
num = input("Marks: ")

f_mark = (float(num) + 2)
print(type(f_mark))

print("Your final mark is : " + str(f_mark))
print(type(f_mark))

""" 


# FORMAT STRING
"""
name = "Lenovo"
f"your final mark is {name}"


3.6

"your final mark is {}".format(name)

2

"your final mark id %s" %(name) 



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print(f"Your final mark is : {f_mark}" )
print(type(f_mark))


num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : {}".format(f_mark) )
print(type(f_mark))


num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))
fmark = str(f_mark)
print(type(fmark))
print("Your final mark is : %s"%(f_mark) )
print(type(f_mark))




# Finding a string in a string
phrase = "the surprise is here somewhare there"

print(phrase.find("There"))


print("the surprise is here somewhare there".find("there"))
print("the surprise is here somewhare there".upper())
print("the surprise is here somewhare there".lower())
print("the surprise is here somewhare there".strip("the"))



# Replace
.replace()


phrase = "I am telling you Truth"
print(phrase)
phrase = phrase.replace("Truth", "Lies")
print(phrase)
print(phrase.replace("Truth", "Lies"))
print(phrase)


phrase = "I am telling you Truth"
phrase = phrase.replace("are", "Lies")
print(phrase)

phrase = "I am telling you Truth".replace("Truth", "Lies")
print(phrase)

a = "Lenovo"
print(a[3]) # o
print(a.index("o"))

print(a.index("vo"))
print(a.index("oxo"))




# NUMBER DATA TYPE:
int
float
complex number

# INT DATA TYPE:

we can use the int data type to represent whole number (integral value)

a = 10
print(type(a)) # class int
b = 232159183759872349579203874728347609238745029348672983746857230958792387495827394
print(b)
print(type(b))

decimal form
binary form
octal form
hexadeciaml form


# Deciaml : base 10 0-9
a = 10
print(a)
print(type(a))
# Binary: base 2 (0-1)
# 0b /0B prefix

a = 0b10
print(a)
print(type(a))

a = 0B11111
print(a)
print(type(a))

# OCTAL : base 8: (0-7)
# Prefix 0o / 0O  zero/o

a = 0o1234
print(a)
print(type(a))

a = 0o12347
print(a)
print(type(a))

# Hexa Decimal : base 16 range(0-9 / a-f) (both lower and upper case are allowed)
# Prefix: 0x / 0X

a = 0xABCDEF
print(a)
print(type(a))

a = 0X12345ACEDF
print(a)
print(type(a))



a = 10
b = 0o10
c = 0x10
d = 0b10
print(a)
print(b)
print(c)
print(d)



concatinate : + / , /fomat string




a = 1000000
b = 1_000_000
print(a)
print(type(a))
print(b)
print(type(b))

b = 1,000,000 # collection 
print(b)
print(type(b))



a = 1_000_000
b = 0o1_000_000
c = 0x1_000_000
d = 0b1_000_000
print(a)
print(type(a))
print(b)
print(type(b))
print(c)
print(type(c))
print(d)
print(type(d))



a = 10
print(a.to_bytes())

"""

# BASE CONVERSION :


# Binary : bin() we can use this function to convert any base to binary

a = 10
print(type(a))
print(a)

a = bin(10)
print(a)
print(type(a))

b = int(a)
print(b)
print(type(b))


a = bin(0o11)
print(a)
print(type(a))

a = bin(0x12F)
print(a)
print(type(a))


# Octal oct() use to convet from any base to octal

a = oct(12534787)
print(a)
print(type(a))

# Hexadecimal: hex() use to convert form any base to hexadecimal

a = hex(12345543962)
print(a)
print(type(a))




# FLOAT: 

a = 10.0
a = 10.5

We can use float data type to represent floting point values (decimal values)

f = 1.234
print(type(f))

4e10 , 4e2

inf datatype
2e309



# CONDITION
# LOOP
TUPLE /LIST
func
class OOP 

package


TKINTER:


django: HTML / CSS / JAVASCRIPT / django

----------------------------------------------------------------------------------------------------------------------------------------
Date: 08/07/2021 


# COMPLEX DATA TYPE:
"""
A complex number is of the form of  a + bj / (a + bi / a + ib math)
a > Real part
b > Imaginary part


a = 10 + 3j
type(a) # class complex
3 method:
1. a.real # return real part of the complex number
2. a.imag # return imaginary part of the complex number
3. a.conjugate() # returns the alternative value of the complex number

if we add a complex number with its conjugate value then it returns the real part

a = 10 + 5j
print(a)
print(type(a))

print(a.real)
print(a.imag)
print(a.conjugate())

b = a.conjugate()
print(a + b)


a = 0b1011 + 5j
print(a)
print(type(a))


a = 0o13457 + 5j
print(a)
print(type(a))

a = 0x13457ABC + 5j
print(a)
print(type(a))




# BOOL DATA TYPE:

True
False

internally True = 1 False = 0

a = True
print(a)
print(type(a))

b = False
print(b)
print(type(b))

a = 10
b = 20
c = a < b # True
print(c)

c = a > b # False 
print(c)

c = False


print(type(True + True)) # 1 + 1  # 2



a = 10
b = 10

c = a - b # 0

if c:
    print("True")
else:
    print("False")



print(True - False) # 1
print(True - True) # 0 Flase





# TYPE CASTING:

a = '10' # String
a = int('10') # exp type casting
a = '10.5' # String
a = float('10.5') #

a = '10j'
a = int('10j') # Error

a = '10_000_000'
a = int(a)
print(a) # 1000000

a = '10,000,000'
a = int(a)
print(a) # Error


complex()

a = '10 + 10j'
a = complex(a)
print(a) # Error

a = 10.5
a = complex(a)
print(a)



# Complex(x,y)

a = 10.5
b = 5

c = complex(a, b)
print(c)


#

a = bool(0)
print(a) # False


a = bool(1)
print(a) # True

a = bool(1.5)
print(a) # True

a = bool(1+5j)
print(a) # True

a = bool(0+0j)
print(a) # False

a = bool("True")
print(a)
print(type(a)) # String

a = bool("False")
print(a)
print(type(a)) # String

x = bool("")
print(x)
print(type(x)) # String

y = bool("")
print(y)
print(type(y)) # String


# STR()

a = 10
b = 20

c = str(a) + str(b)
print(c) # 30
print(type(c)) # class int





1. int()
2. float()
3. complex() / complex(a) / complex(a, b)
4. bool()
5. str()
6. list()
7. tuple()
7. set()
8. dict()


# BYTES:
a = [10, 20, 30, 40]
b = bytes(a)
print(b)
print(type(b))

print(b[0])
print(b[1])
print(b[-1]) # 40

for i in b: print(i)


"""
"""
c = str(b)
print(c)
print(type(c))


# 0-256 
a = [0, 1, 3, 257]
b = bytes(a)
print(a)
print(type(a))

a = 'Apple'
b = 'Capple'

b = 'C' + a[:]
print(b)

a = 'Apple'
b = 'Capple'

b = 'C' + a[:].lower()
print(b)




a = [10, 20, 30, 40]
b = bytes(a)
print(b[0])


b[0] = 50
print(b[0])



# BYTEARRAY:

a = [1, 2, 3, 156]
b = bytearray(a)
#print(b)
print(type(b))
#print(b[0])

b[0] = 100
#print(b[0])

for i in b:print(i)

b[-1] = 200
for i in b:print(i)


# Tuple:

Tuple / List/ Dictinary / Set / range > Collection  type

a = 123
a = "ateing", "string"

customer details:
name: "Lenovo" / hp
add: [at / post/ dist/ pin / cont] 
dbo: 
phone:
email:


DATA STRUCTURE :

name  = ["lenovo", "acer", "hp", "dell", "apple", "msi"] -- 1000000

    

99999

stack / queue / tree/

stack




immutable sequence :

()- Parentheses


a = (1,)
print(a)
print(type(a))

# Tuple Rule: more than 1 records , or comma separated 
    

a = 1,
print(a)
print(type(a))


a = (1, 2, 4, 7, 9)
print(a)
print(type(a)) # Tuple

a = 1, 2, 3, 5, 8, 9
print(a)
print(type(a)) # Tuple


Tuple Literals :
Tuple() function : built in function

Tuple Literals:
    a =1,
    a = 1, 2, 3, 4
    a =(1, 2, 4, 5)
    a = ("a", "b", "c')


a = 100000
a = 1_000_000
a = 1,000,000 > Tuple 

a = '1'

b = tuple(a)
print(b)
print(type(b)) # TypeError: 'int' object is not iterable

Which is itrable:

a = "saring" 
a[2] # Error

string index -base "L,E,N,O,V,O" 0,1,2,3,4,5
index base:
 
a = "LENOVO"
b = tuple(a) # 
print(b)
print(type(b))
   
a = 12345
b = 2
c = 3

t = tuple(str(a))
print(t)
print(type(t))

print(a)
print(type(a))



a =()
print(a)
print(type(a))


a = tuple()
print(a)
print(type(a))

a = 1234
a = "abcd"

a = 1234, "acbd"
print(a)
print(type(a))
print(type(a[0]))

print(a[1])
print(type(a[1]))

a = 1234, "abcd", ("Lenovo",)
print(a)
print(type(a))

print(a[2])
print(type(a[2]))

print(len(a))

# Slicing
print(a[0:]) #
print(a[2:]) # 

print(a[1][0])


# Immutable:


a = "Lenovo"
print(id(a)) #  memory address 
a = "Levo" 
print(id(a)) #

a = "Lenovo" #
print(id(a))
b = "Lenovo" #
print(id(b)) 



a = 1234, "abcd", ("lenovo,")
print(a)
print(type(a))
print(id(a))
"""
"""
(1234, 'abcd', 'lenovo,')
<class 'tuple'>
1249283854848
"""
"""
a = 123456
print(a)
print(type(a))
print(id(a))

# interpreter: step / step 
a = 1234 # id = 12346439
print(a) 
a = 12345 # id = 4624628
print(a)


# Interables:

a = "Lenovo"
for i in a:
    print(i)



a = 1234, "acbd", ("Lenovo",)
print(a)
print(type(a))

for i in a:
    print(i)

for i in a[2][0]:
    print(i)

# Pack Unpack:\

a =1, 2, 34,
print(a) # Packing

print(a[0])
a = (1, 2, 3, 4)
print(a)


a = 1, 2, 3, 4
b= a[0]
c=a[1]
d=a[2]
e=a[3]

print(a, b,c, d, e)

a = 1, 2, 3, 4, 5
c, d, e, f, g = a
print(c, d, e, f, g)



#

in operator:
"""
a = 1234, "abcd", ("lenovo,")
print(a)

print('a' in a[1])
print('o' in a[2])
print(1 in a[0])