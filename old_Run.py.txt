"""name = input("Enter your name ") # character
marks = input("Enter your mark: ") # number
print(name)
print(marks)
print(type(name)) # str
print(type(marks)) # number / int
print(marks + 10)
print(name)"""

"""

a = "12345678910"
print(a[-1:-5])


name = "Jean-luc Picard"
name.lower()
print(name)
print(name.lower())


name = "Jean-luc Picard   "
print(name)
print(len(name.rstrip()))
print(len(name))
"""
"""

STRING PROPEERTIES:
1. String contains character
2. string have length
3. Charactrer in string appear in a sequence

# LENGTH
len()

print(len("hello"))


name2 = input("Enter your name: ")
print(name2)
print(len(name2))
name_length = len(name2)
print(name_length)




alphnum = "123"
print(alphnum)
print(len(alphnum))

'abd'
"abc"

' '
" "
' "
"""

print("Hello")



"""name = input("Enter your name ") # character
marks = input("Enter your mark: ") # number
print(name)
print(marks)
print(type(name)) # str
print(type(marks)) # number / int
print(marks + 10)
print(name)"""

"""

a = "12345678910"
print(a[-1:-5])


name = "Jean-luc Picard"
name.lower()
print(name)
print(name.lower())


name = "Jean-luc Picard   "
print(name)
print(len(name.rstrip()))
print(len(name))
"""
"""

STRING PROPEERTIES:
1. String contains character
2. string have length
3. Charactrer in string appear in a sequence

# LENGTH
len()

print(len("hello"))


name2 = input("Enter your name: ")
print(name2)
print(len(name2))
name_length = len(name2)
print(name_length)




alphnum = "123"
print(alphnum)
print(len(alphnum))

'abd'
"abc"

' '
" "
' "



name = "acer"
name : variable / identifier

Python identifiers



# RESERVED WORDS:

. True False None
. and, or, not, is
. if elif else
. while, for, break, continue, return, in, yield
. try, except, finally, raise, assert
. import, from, as, class, def, pass, global, nonlocal, lambda, del, with


# DATA TYPES / Built In OBJECT

NUMBER : 123, 3.123, 3+4j, Decimal, Fraction

STRING: 'acer', "acer", "acer'a", ' brand "acer" ', "123", "a/x01@"

LIST : [1] , ["acer"], ["a", "b", "c"], [a, [a, b, c], d]

DICTIONARY: {"food": 'spam', 'test':'yum'}, {'food':["a", "b", "c"]}

TUPLE: ("hello", "acer", "acb"), ('food', ("a", "b", "c"))

FILES: myfile = open("egg", "r")

SET: set("abc"), {"a", "b", "c"}

BOOLEAN: True, False, None
None: None



a = "hello"
a = "hello
acer "


"""

a = "hello \
Python \
              Tutorial"

#print(a)

""" Hello
Pthon
Tutorial"""

"""
 print hello
 Python

print(b) # print
print(c)


Arith Opt: + , _ , * , /

+
*


# + (Join)
a = "hello"
b = "Python"
print(a, b)
print(a + b)
print(a + " " + b)

c = a, b
print(c)
d = a + ' ' + b
print(d)

# *
a = "Python"
print(a)
print(a)
print(a)
print(a)
print(a)

a = a + ' '
print(a * 5)
print((a + ' ') * 5)


# STRING INDEX and SLICING

name = "ACER"
#identifier_name/ variable_name[1]

#any programming language: index start woth 0 
print(name[1])
print(name[0])

last_index = len(name) - 1
print(last_index)
print(name[last_index])


L | E | N | O | V | O   len = 6
0   1   2   3   4   5

name = "LENOVO"
print(name[len(name)-2])

-index number


  L  | E |  N  |  O  |  V  |  O 
 -6   -5   -4    -3    -2    -1


name = "12345" 
print(name[4])

# SLICING: SUBSTRING "LAPTOP BRAND LENOVO"

varibale = "value"
varibale_name[start_index:end_index]
variable_name[:end_index] # start_index default 0
varibale_name[start_ndx:] # end_index default last_index number
 
|  L  |  E  |  N  |  O  |  V  |  O  |
0     1     2     3     4     5     6


|  L  |  E  |  N  |  O  |  V  |  O  |
-6   -5    -4    -3    -2    -1     


name = "LENOVO"
print(name[0:3])
print(name[:])
print(name[1:9])
print(len(name[1:9]))
print(name[3:4])
print(name[:6])



print(name[-6:-2])
print(name[-2:-6])

print(name[6:4])

print(name[-100:]) # None


 function
 method
def
calss
 def 

print("hello")
.print()

len()

# STRING INBUILT METHOD

# UPPER / LOWER

name = " Lenovo " # camel case
print(name.lower())
name2 = name.lower()
print(name2)
print(name)


name = "Lenovo" # camel case
print(name.upper())
name2 = name.upper()
print(name2)
print(name)

+919898976564+91


lstrip
rstrip
strip


name = "   LENOVO   "
print(len(name)) # 12

print(name.lstrip()) # defailt space will be considered 
print(len(name.lstrip()))

print(len(name)) # 12

print(name.rstrip()) # defailt space will be considered 
print(len(name.rstrip()))

print(name.strip()) # defailt space will be considered 
print(len(name.strip()))

phone = "+91 9696392244+91"
print(phone.lstrip("+91"))
print(phone.rstrip("+91"))
print(phone.strip("+91").strip().strip())

# IMMUTABLE

name = "LENOVO"
print(name[1]) # E
name ="O"
print(name)


# NUMBER




num = input("Enter number: ")
print(int(num))
print(float(num))

"""


def vid():
    open winmp

test()

class A:
    def test()
    


class Laptop:
    def edit():
        open notepad
    def vid():
        open vlc

        
car


class car:
    
    
    def move():
        drive forward
    def move_back():
        drive back
    def numsic():
        paly music
    def tyre():
        number of tyres

        
farari = car()
farari.move()


 edit()

 object

 mylaptop = Laptop()

 mylaptop.edit() 

 vid()



 # STRIP:

 name = " LENOVO "
 name2 = "LENOVO"

 name.strip() # default remove space from 

 strip(name)
 lstrip()
 rstrip()




"""# STRING IMMUTABLE:
name = "LENOVO"
print(name[1])


print(name)

name2 = name[0] + 'I' + name[2:]

print(name2)


Memory:

name = "a"

name2 = 'a'

name3 = "a"

class str 

id()

name : "LENOVO"
memory location: 2315404857072

name2 = "LENOVO"
2315404857072


>>> name = "Lenovo"
>>> id(name)
2315404043952

 
 E n terprise
0 1 2

# START OR END

.startswith()
.endswith()\


# String Index for Slice
  |  E   |  n   |  t   |  e   |  r  |  p  |  r  |  i  |  s  |  e  |
-10     -9     -8     -7     -6    -5    -4    -3    -2    -1


  |  E   |  n   |  t   |  e   |  r  |  p  |  r  |  i  |  s  |  e  |
     0      1      2      3      4     5     6     7     8     9   

name = "Enterprise"
print(name.startswith('en')) # False
print(name.startswith('En')) # True

print(name[0:2])
print(name[0:] == 'En')

print(name.endswith('ise')) # True
print(name[-1:-3] == 'ise')
print(name[-3:])
print(name[-3:] == 'ise')

print(name[7]+ name[8] + name[9] == 'ise')


# USER INPUT:

at Run time to get input from the user we can use input() function
"""

name = input("Enter your name: ")
print("You have entered " + name)

Note: default data type string 


# Interact With input()
"""
phone = input("> ")
print("You have enterted: " + phone)
print(type(phone))

# string: '' / ""



num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " + f_mark)
print(type(f_mark))

num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " , f_mark)
print(type(f_mark))


num = input("Marks: ")
f_mark = (num + "2")
print("Your final mark is : " + f_mark)
print(type(f_mark))

num = input("Marks: ")
f_mark = (num , "2")
print(type(f_mark))
print("Your final mark is : " , f_mark)



name = input("name: ")
age = input("age")
print("Your name is " + name + " and you are " + age + " yers old.")

name = input("name: ")
age = input("age")
print("Your name is", name,"and you are" , age , "yers old.")



# int()
to convert any real number if it is in string type then by usig int() function we can convert it to integer data type



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : " , f_mark)
print(type(f_mark))



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : " + str(f_mark))
print(type(f_mark))


# float 
num = input("Marks: ")

f_mark = (float(num) + 2)
print(type(f_mark))

print("Your final mark is : " + str(f_mark))
print(type(f_mark))

""" 


# FORMAT STRING
"""
name = "Lenovo"
f"your final mark is {name}"


3.6

"your final mark is {}".format(name)

2

"your final mark id %s" %(name) 



num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print(f"Your final mark is : {f_mark}" )
print(type(f_mark))


num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))

print("Your final mark is : {}".format(f_mark) )
print(type(f_mark))


num = input("Marks: ")

f_mark = (int(num) + 2)
print(type(f_mark))
fmark = str(f_mark)
print(type(fmark))
print("Your final mark is : %s"%(f_mark) )
print(type(f_mark))




# Finding a string in a string
phrase = "the surprise is here somewhare there"

print(phrase.find("There"))


print("the surprise is here somewhare there".find("there"))
print("the surprise is here somewhare there".upper())
print("the surprise is here somewhare there".lower())
print("the surprise is here somewhare there".strip("the"))



# Replace
.replace()


phrase = "I am telling you Truth"
print(phrase)
phrase = phrase.replace("Truth", "Lies")
print(phrase)
print(phrase.replace("Truth", "Lies"))
print(phrase)


phrase = "I am telling you Truth"
phrase = phrase.replace("are", "Lies")
print(phrase)

phrase = "I am telling you Truth".replace("Truth", "Lies")
print(phrase)

a = "Lenovo"
print(a[3]) # o
print(a.index("o"))

print(a.index("vo"))
print(a.index("oxo"))




# NUMBER DATA TYPE:
int
float
complex number

# INT DATA TYPE:

we can use the int data type to represent whole number (integral value)

a = 10
print(type(a)) # class int
b = 232159183759872349579203874728347609238745029348672983746857230958792387495827394
print(b)
print(type(b))

decimal form
binary form
octal form
hexadeciaml form


# Deciaml : base 10 0-9
a = 10
print(a)
print(type(a))
# Binary: base 2 (0-1)
# 0b /0B prefix

a = 0b10
print(a)
print(type(a))

a = 0B11111
print(a)
print(type(a))

# OCTAL : base 8: (0-7)
# Prefix 0o / 0O  zero/o

a = 0o1234
print(a)
print(type(a))

a = 0o12347
print(a)
print(type(a))

# Hexa Decimal : base 16 range(0-9 / a-f) (both lower and upper case are allowed)
# Prefix: 0x / 0X

a = 0xABCDEF
print(a)
print(type(a))

a = 0X12345ACEDF
print(a)
print(type(a))



a = 10
b = 0o10
c = 0x10
d = 0b10
print(a)
print(b)
print(c)
print(d)



concatinate : + / , /fomat string




a = 1000000
b = 1_000_000
print(a)
print(type(a))
print(b)
print(type(b))

b = 1,000,000 # collection 
print(b)
print(type(b))



a = 1_000_000
b = 0o1_000_000
c = 0x1_000_000
d = 0b1_000_000
print(a)
print(type(a))
print(b)
print(type(b))
print(c)
print(type(c))
print(d)
print(type(d))



a = 10
print(a.to_bytes())

"""

# BASE CONVERSION :


# Binary : bin() we can use this function to convert any base to binary

a = 10
print(type(a))
print(a)

a = bin(10)
print(a)
print(type(a))

b = int(a)
print(b)
print(type(b))


a = bin(0o11)
print(a)
print(type(a))

a = bin(0x12F)
print(a)
print(type(a))


# Octal oct() use to convet from any base to octal

a = oct(12534787)
print(a)
print(type(a))

# Hexadecimal: hex() use to convert form any base to hexadecimal

a = hex(12345543962)
print(a)
print(type(a))




# FLOAT: 

a = 10.0
a = 10.5

We can use float data type to represent floting point values (decimal values)

f = 1.234
print(type(f))

4e10 , 4e2

inf datatype
2e309



# CONDITION
# LOOP
TUPLE /LIST
func
class OOP 

package


TKINTER:


django: HTML / CSS / JAVASCRIPT / django

----------------------------------------------------------------------------------------------------------------------------------------
Date: 08/07/2021 


# COMPLEX DATA TYPE:
"""
A complex number is of the form of  a + bj / (a + bi / a + ib math)
a > Real part
b > Imaginary part


a = 10 + 3j
type(a) # class complex
3 method:
1. a.real # return real part of the complex number
2. a.imag # return imaginary part of the complex number
3. a.conjugate() # returns the alternative value of the complex number

if we add a complex number with its conjugate value then it returns the real part

a = 10 + 5j
print(a)
print(type(a))

print(a.real)
print(a.imag)
print(a.conjugate())

b = a.conjugate()
print(a + b)


a = 0b1011 + 5j
print(a)
print(type(a))


a = 0o13457 + 5j
print(a)
print(type(a))

a = 0x13457ABC + 5j
print(a)
print(type(a))




# BOOL DATA TYPE:

True
False

internally True = 1 False = 0

a = True
print(a)
print(type(a))

b = False
print(b)
print(type(b))

a = 10
b = 20
c = a < b # True
print(c)

c = a > b # False 
print(c)

c = False


print(type(True + True)) # 1 + 1  # 2



a = 10
b = 10

c = a - b # 0

if c:
    print("True")
else:
    print("False")



print(True - False) # 1
print(True - True) # 0 Flase





# TYPE CASTING:

a = '10' # String
a = int('10') # exp type casting
a = '10.5' # String
a = float('10.5') #

a = '10j'
a = int('10j') # Error

a = '10_000_000'
a = int(a)
print(a) # 1000000

a = '10,000,000'
a = int(a)
print(a) # Error


complex()

a = '10 + 10j'
a = complex(a)
print(a) # Error

a = 10.5
a = complex(a)
print(a)



# Complex(x,y)

a = 10.5
b = 5

c = complex(a, b)
print(c)


#

a = bool(0)
print(a) # False


a = bool(1)
print(a) # True

a = bool(1.5)
print(a) # True

a = bool(1+5j)
print(a) # True

a = bool(0+0j)
print(a) # False

a = bool("True")
print(a)
print(type(a)) # String

a = bool("False")
print(a)
print(type(a)) # String

x = bool("")
print(x)
print(type(x)) # String

y = bool("")
print(y)
print(type(y)) # String


# STR()

a = 10
b = 20

c = str(a) + str(b)
print(c) # 30
print(type(c)) # class int





1. int()
2. float()
3. complex() / complex(a) / complex(a, b)
4. bool()
5. str()
6. list()
7. tuple()
7. set()
8. dict()


# BYTES:
a = [10, 20, 30, 40]
b = bytes(a)
print(b)
print(type(b))

print(b[0])
print(b[1])
print(b[-1]) # 40

for i in b: print(i)


"""
"""
c = str(b)
print(c)
print(type(c))


# 0-256 
a = [0, 1, 3, 257]
b = bytes(a)
print(a)
print(type(a))

a = 'Apple'
b = 'Capple'

b = 'C' + a[:]
print(b)

a = 'Apple'
b = 'Capple'

b = 'C' + a[:].lower()
print(b)




a = [10, 20, 30, 40]
b = bytes(a)
print(b[0])


b[0] = 50
print(b[0])



# BYTEARRAY:

a = [1, 2, 3, 156]
b = bytearray(a)
#print(b)
print(type(b))
#print(b[0])

b[0] = 100
#print(b[0])

for i in b:print(i)

b[-1] = 200
for i in b:print(i)


# Tuple:

Tuple / List/ Dictinary / Set / range > Collection  type

a = 123
a = "ateing", "string"

customer details:
name: "Lenovo" / hp
add: [at / post/ dist/ pin / cont] 
dbo: 
phone:
email:


DATA STRUCTURE :

name  = ["lenovo", "acer", "hp", "dell", "apple", "msi"] -- 1000000

    

99999

stack / queue / tree/

stack




immutable sequence :

()- Parentheses


a = (1,)
print(a)
print(type(a))

# Tuple Rule: more than 1 records , or comma separated 
    

a = 1,
print(a)
print(type(a))


a = (1, 2, 4, 7, 9)
print(a)
print(type(a)) # Tuple

a = 1, 2, 3, 5, 8, 9
print(a)
print(type(a)) # Tuple


Tuple Literals :
Tuple() function : built in function

Tuple Literals:
    a =1,
    a = 1, 2, 3, 4
    a =(1, 2, 4, 5)
    a = ("a", "b", "c')


a = 100000
a = 1_000_000
a = 1,000,000 > Tuple 

a = '1'

b = tuple(a)
print(b)
print(type(b)) # TypeError: 'int' object is not iterable

Which is itrable:

a = "saring" 
a[2] # Error

string index -base "L,E,N,O,V,O" 0,1,2,3,4,5
index base:
 
a = "LENOVO"
b = tuple(a) # 
print(b)
print(type(b))
   
a = 12345
b = 2
c = 3

t = tuple(str(a))
print(t)
print(type(t))

print(a)
print(type(a))



a =()
print(a)
print(type(a))


a = tuple()
print(a)
print(type(a))

a = 1234
a = "abcd"

a = 1234, "acbd"
print(a)
print(type(a))
print(type(a[0]))

print(a[1])
print(type(a[1]))

a = 1234, "abcd", ("Lenovo",)
print(a)
print(type(a))

print(a[2])
print(type(a[2]))

print(len(a))

# Slicing
print(a[0:]) #
print(a[2:]) # 

print(a[1][0])


# Immutable:


a = "Lenovo"
print(id(a)) #  memory address 
a = "Levo" 
print(id(a)) #

a = "Lenovo" #
print(id(a))
b = "Lenovo" #
print(id(b)) 



a = 1234, "abcd", ("lenovo,")
print(a)
print(type(a))
print(id(a))
"""
"""
(1234, 'abcd', 'lenovo,')
<class 'tuple'>
1249283854848
"""
"""
a = 123456
print(a)
print(type(a))
print(id(a))

# interpreter: step / step 
a = 1234 # id = 12346439
print(a) 
a = 12345 # id = 4624628
print(a)


# Interables:

a = "Lenovo"
for i in a:
    print(i)



a = 1234, "acbd", ("Lenovo",)
print(a)
print(type(a))

for i in a:
    print(i)

for i in a[2][0]:
    print(i)

# Pack Unpack:\

a =1, 2, 34,
print(a) # Packing

print(a[0])
a = (1, 2, 3, 4)
print(a)


a = 1, 2, 3, 4
b= a[0]
c=a[1]
d=a[2]
e=a[3]

print(a, b,c, d, e)

a = 1, 2, 3, 4, 5
c, d, e, f, g = a
print(c, d, e, f, g)



#

in operator:
"""
a = 1234, "abcd", ("lenovo,")
print(a)

print('a' in a[1])
print('o' in a[2])
print(1 in a[0])


# LIST:
cars = ['BMW', 'FORD', 'KIA', 'HONDA', 'MARUTI', 'HYUNDAI', 'AUDI', 'TATA']

print(cars)

cars =  ('BMW', 'FORD', 'KIA', 'HONDA', 'MARUTI', 'HYUNDAI', 'AUDI', 'TATA')
print(cars)

cars =  'BMW', 'FORD', 'KIA', 'HONDA', 'MARUTI', 'HYUNDAI', 'AUDI', 'TATA'
print(cars)

# Tuple: Immutable (we can not change the value ) (parentheses)
1. using comma in between two values  # tuple literals 
2. tuple()

# LIST:  Mutables (we can chage the value ) [sq bracket] 
1. list literals 
2. list() function 
3. split() function 



# List Literals:

colors = ["red", "blue", "yellow", "green"]
print(colors) # List 
type(colors)



colors = "red", "blue", "yellow", "green"
print(colors) # Tuples 


colors = ("red", "blue", "yellow", "green")
print(colors) # Tuples 

colors = "red"
print(colors)


# list() function:

    
colors = list((1, 2, 3, 4))
print(colors)

num = 1, 2, 3, 4  # Tuples
colors = list(num)
print(colors)
print(type(list))


name  |  age  |  add  | phone  |   marks  |

max     15      BBS     969239     79

a = "name||','||age||','||add ..."

HI, <name>
Your age is <age>
and you are from <add>
your phone number is  <phone>
You got <marks> in  <subject>


name = "LENOVO"
l = list(name)
print(l)
print(type(l))


num = 12345 # 
# nt = tuple(num) # 
nl = list(num) # TypeError: 'int' object is not iterable
print(nl)
print(type(nl))

num = 12345 # 
nl = list(str(num)) # TypeError: 'int' object is not iterable
print(nl)
print(type(nl))


# SPLIT () Function :
    
"LEN V" 
"EGG, MILK, CHEESE"
EGG MILK CHEESE 


a = "your phone number is <phone>"
a_list = a.split(" ")
print(a_list)
print(type(a))

a = "egg, milk , cheese ,       ,rice,"
a_list = a.split(",")
print(a_list)
print(type(a_list))

phone = 123456,23452346,234529067 # C1
phone = 123455, 453634573, 467354735, #C2
phone = 13534598, 32458298, 342857927, 293452907, # C3

phone1:
phone2:
phone3: 
phone4: 
    
phone = "13534598+ 32458298+ 342857927, 29345290+"
split_list = phone.split("+")
print(split_list)
a = split_list[2]
print(a.split(","))
print(type(a))

a[1:]
a[:len(a)]

a = " LENOVO "
print(len(a))
a = a[:len(a) - 1]
print(len(a))
a = a[1:]
print(len(a))
    

string =
list 
tuple
set
dictionary 


a = 1 2 3 4 5 6
print(a.split(" "))

a = ("1_2_3_4_5_6",)
print(a) # 
print(type(a))

print(a[0].split("_"))



t = 1, 2, 34,5
a, b, c, d = t
print(a, b, c, d)

l = [1, 2, 3, 4]
x, y, z, o = l
print(x, y, x, o)

t = 'lenovo', 'acer', 'hp', 'dell'
print(t)
t2 = t[1]
print(t2)
print(type(t2))

t0, t1, t2, t3 = t
print(t0, t1, t2, t3)



t0, t1, t2 = t
print(t0, t1, t2 )  # ValueError: too many values to unpack (expected 3) 


# split()

a = "The quick brown fox 10" 
pl = a.split(' ')
print(pl)
print(type(pl))
x = (pl[-1])
print(x)
print(type(x))
print(x * '10') # + concatinate , * mutiplication string , int , int 


a= ['a', 'b']
a = 'ab'
list(a)
a = 'a b'
a.split(' ')

a = 'abbaabbaccbaffba'
x = a.split('ba') #  ab, ab,'' /  ab, ab, ba 
print(x)
print(len(x[-1]))

if x[-1]:
    print('hello')
else:
    print('Welcome')
    
y = x[0:2] 
print(x)

y = x[0:len(x)-1]
print(y)

y =x[:-1]
print(y)

# List Operations:
    
number = [1, 2, 3, 4]
print(number[0])
print(number[-1]) # 4 / 4

# slice 



|  1  |   2  |  3  |  4  |
0     1      2     3



number = [1, 2, 3, 4]
print(number[:0]) # 1, 2, 3 / 1, 2, 3  boundry 
print(number[1:1])
print(number[1:2])
print(number[:2])
print(number[0:])
print(number[3:])
print(number[4:1])



 |  1  |   2  |  3  |  4  |
 0     1      2     3
-4    -3     -2    -1    

print(number[:0])  #[] None  
print(number[1:-1]) # 1, 4 / 2, 3, 4
print(number[-1:-4]) # [1, 2, 3]
print(number[-2:3])   # 3, 4 
print(number[4:])  # 1, 2, 3, 4 
print(number[3:])  # 4 


# in operator 
number = [1, 2, 3, 4, 5]
print(5 in number) # True
print(6 in number) # False 
print('5' in number) # True

number = 12345
print(5 in number) # TypeError: argument of type 'int' is not iterable

number = 12345
print('5' in str(number))

number = 12345
print('5' in str(number))


# mutable : 
    


# how to check if two variables are identical 

== : Comparision 
id(): indentical function 
is : operator 

a = "ACER"
b = a 
print(a == b) # True
print(id(a))
print(id(b))
print(a is b) # True

a = "LENOVO"
b = "LENOVO"
print(a == b) # True
print(id(a))
print(id(b))
print(a is b) # True

Tuple:
    
a = ("LENOVO",)
b = a
print(a == b) # True
print(id(a))
print(id(b))
print(a is b) # True


a = ("LENOVO",)
b = ("LENOVO",)
print(a == b) # True
print(id(a))
print(id(b))
print(a is b) # True

# check if the each word in a string begins with capital letter 
a = 'The Lenovo Store' 
print(a.istitle()) # True

a = 'The lenovo Store'
print(a.istitle()) # False

a = 'the lenovo store'
b = a.title()
print(b)


# check if a string contains a specific substring:
the in operator will return true if a string contains a substring 

a = "the lenovo store"
print('lenovo' in a) # True
print('Lenovo' in a) # False 
print('len' in a) # True 



# Find the index of the first occurrence of a substring in a string:

find()
index()

a = "The worlds fastest car"
print(a.find('car')) # 19
print(a.find('s')) # 9
print(a.find('s', 10)) # 13
print(a.find('s', 14)) # 16 
print(a.find('s', 17)) # -1

print(a.find('z')) # -1 


print(a.index('car')) # 19
print(a.index('z')) # ValueError: substring not found



# Count the total number of character in a string:
len() function will return the same 

a = "The worlds fastest car"
print(len(a)) # 22

# count the number of specific character in a string:
a = "The worlds fastest car"
print(a.count('s')) # 3
print(a.count('z')) # 0 
a = ' '
print(a.isspace()) # True


# What is f string 

a = 'car'
print('The worlds fastest ' + a) # concatinate 

b = 350
#print('The worlds fastest ' + a +'its top speed is '+ b) # TypeError: can only concatenate str (not "int") to str


print(f'The worlds fastest {a} its top speed is {b} ') # f-string 
print('The worlds fastest {} its top speed is {} '.format(b, a))


# 
# Changing Elements in a list: 
    
#immutable: string , int, tuple 
#mutable: list  
  
car = ['audi', 'bmw', 'honda', 'maruti', 'ford']
print(car)
print(car[2]) # 'honda' 

car[2] = 'KIA'
print(car)

car[4] = 'MITSUBISI'
print(car)

car[4] = "MAHINDRA", 'MG'
print(car)

car[6] = "SUZUKI"
print(car) # IndexError: list assignment index out of range
 

print(car[4][1])


print(car[2:4]) # 

car[2:4] = ['TATA', 'MAHINDRA', 'HYUNDI']
print(car)


vic = []  
car = ['audi', 'bmw', 'honda', 'maruti', 'ford']
vic = car[1] ="TATA"
print(car)
print(vic)



# .insert()
car = ['audi', 'bmw', 'honda', 'maruti', 'ford']
car.insert(1, 'TATA')
print(car)

car.insert(10, 'MG')
print(car)
print(car.index('MG'))

car.insert(15, "KIA", 'LUXES','FARRARI') # TypeError: insert expected 2 arguments, got 4
print(car)

a = "KIA", 'LUXES','FARRARI'
car.insert(15, a)
print(car)

 L  E  N  O  V  O
               -1
car.insert(-1, 'BUGATI')
print(car)

car = car.insert(-1, 'LAND ROVER')
print(car) # None

car = ['audi', 'bmw', 'honda', 'maruti', 'ford']
vic = car.insert(-1, 'LAND ROVER')
print(vic) # none 

a = 'lenovo'
print(a.upper()) # 
print(a)





# f-string: interpolation 
# fotramt()

a = "easy"
b = 'exam'

print("The Math {} was so {}".format(b, a))


# Check if a string contains only numbers
# isnumeric() returns the True if all the characters are numeric
a = "Abcd1234" 
print(a.isnumeric()) # False 

a = '1234' 
print(a.isnumeric()) # True 


age = input("Please enter your age: ")

flag =  age.isnumeric()
if flag and age > 18:
    
    print("You are eligible to Vote")
elif flag == False:
    print("Please enter a valid number")
   


a = '1.4'
print(a.isnumeric()) # False
print(a.isdecimal()) # False
print(a.isdigit()) # False


# Split a string on a specific character 

a = "The worlds fasted car"

alist = a.split(" ")
print(alist)
print(len(alist))

a1, a2, a3, a4 = alist 
print(f"\n{a1}\n{a2}\n{a3}\n{a4}")


# Checkk if the string is composed of all lower case characters
#.islower() returns True only if all the character in a string are lower
a = "lenovo"
print(a.islower()) # True

a = "Lenovo"
print(a.islower()) #False


a = "lENOVO"
print(a.istitle())# False


print(a[0].islower()) #True
print(a[0].isupper()) # 

# 

a = ".Lenovo" 

b = ''.join(reversed(a))
print(b)

a = "Ford"
b = "car"

c = 'abcd'.join(a)
print(c)


print('acer'.join('lenovo'))


a = ('a', 'b', 'c')
print(''.join(a))






# JOIN 



# 
car = ['ford', 'bmw', 'audi', 'kia']

b ='maruti'

car[0] = b
print(car) # 

car[-1] = b
print(car) # 

car = ['ford', 'bmw', 'audi', 'kia']
b = ['Maruti', 'Honda', 'Hyundi']

car.insert(len(car), b)
print(car)


# The list.pop() method takes one argument as parameter, an index i , and removes the value from the list at that index .

 
car = ['ford', 'bmw', 'audi', 'kia']
print(car.index('kia'))

car.pop(car.index('kia'))
print(car)

car = ['ford', 'bmw', 'audi', 'kia']
car.pop(car.index('kiaa')) # ValueError: 'kiaa' is not in list
print(car)

car.pop(car.find('kiaa')) # AttributeError: 'list' object has no attribute 'find'
print(car) 

car = ['ford', 'bmw', 'audi', 'kia']
car.pop(-1)
print(car)

car = ['ford', 'bmw', 'audi', 'kia']
car.pop(0)
print(car)


car = ['ford', 'bmw', 'audi', 'kia']
car.pop(0:2)
print(car)


car = ['ford', 'bmw', 'audi', 'kia']
c = car.insert(10, 'HONDA')
print(c) # None

car = ['ford', 'bmw', 'audi', 'kia']
car.insert(1, 'HONDA')
print(car) # None

car = ['ford', 'bmw', 'audi', 'kia']
c = car.pop(2)
print(c) # audi
print(car)

car = ['ford', 'bmw', 'audi', 'kia']
c = car.pop(5) # IndexError: pop index out of range
print(c) # audi
print(car)

car = ['ford', 'bmw', 'audi', 'kia']
car.pop()
print(car)



#remove()

car = ['ford', 'bmw', 'audi', 'kia']
c = car.remove('kia')
print(car)
print(c)

car = ['ford', 'bmw', 'audi', 'kia']
c = car.pop(3)
print(car)
print(c)


sentence = "It was a stromy night\nThe house creeked\nThe wind blow"
print(sentence)
split_lines = sentence.splitlines()
print(split_lines)

sentence = "Sally sells sea shells by the sea shore"
nsent = sentence.replace('sea', 'mountain')
print(nsent)


print(min('string'))
print(min('ABCDa'))

sentence = "If you want to be a Ninja"
print(sentence.partition('to'))
mapping = str.maketrans('abcs', '123S')

print("abc are the first three letters".translate(mapping))


a = "ACER"
print(a.translate("A"))

mydict = {80: 83}
text = "Hello Sam!"
print(text.translate(mydict))

# Join 
a = 'Lenovo'
print('-'.join(a))#

a = ('acer', 'dell', 'lenovo')
print('-'.join(a))


# splitlines 
sent = "It was a stromy night\nThe house creeked\nThe wind blow."
print(sent)

sent = "It was a stromy night \
The house creeked \
The wind blow."
print(sent)

sent = 'It was a stromy night \
The house creeked \
The wind blow.'
print(sent)

sent = """It was a stromy night 
The house creeked 
The wind blow."""
print(sent)
sent = '''It was a stromy night 
The house creeked 
The wind blow.'''
print(sent)

sent = "It was a stromy night\n The house creeked\n The wind blow."
print(sent)

sent = "It was a stromy night\nThe house creeked\nThe wind blow."
print(sent.splitlines())
print(sent.split(' ')) # 


# Replace 
sentance = 'Sally sells sea shells by the sea shore'
r_string = sentance.replace('sea', 'mountain' ) # accepts 2 arguments
print(r_string)

# Replace 
sentance = 'Sally sells sea shells by the sea shore'
r_string = sentance.replace('sea', 'mountain', 1 ) # accepts 2 arguments
print(r_string)


# min Returns the minimum character in a string 
sentance = 'Sally sells sea shells by the sea shore'
print(min(sentance))

print(min('SallysellsseashellsbytheseashoreA')) # A..z

print(min('string'))
print(min('1234354'))
print(min(1234354)) #  'int' object is not iterable  

a = ''
print(a.isspace())

a = ' z'
print(a.isspace())

a = ' '
print(a.isspace())

a = 'Acer\n'
print(a * 5)  # 


a = input("Enter your name: ") # sayed
a = a + '\n'
print(a * 10)

a = input("Enter your name: ") # sayed
print( a * 10 , end=' ' )
b="ACER"
print(b)

sentance = 'Sally sells sea shells by the sea shore'
print(sentance.title())


string = "Hello 1 World 2"

vowles = ('a', 'e', 'i', 'o', 'u')


a = ''.join([c for c in string if c not in vowles] )
print(a)

for c in string:
    #print(c)
    if c not in vowles:
        print(c)
    


# 
user_input = int(input("Enter a number to check if it is even"))
flag = ('Even' if user_input % 2 == 0 else 'Odd')    
print(flag)   

user_input = int(input("Enter a number to check if it is even"))
print ('Even' if user_input % 2 == 0 else 'Odd')    

user_input = int(input("Enter a number to check if it is even"))
print ('Even' if user_input % 2 == 0 else 'Odd')  


uname = input("enter your name: ")
tname = tuple(uname)
print(tname) # (aser,)



a = 'acer' # string
Lista = a.split() # 'acer'
print(Lista)
print(type(Lista))
print(tuple(Lista))


a = ('a', 'b', 'c')
b = ('d', 'e', 'f')
print(a+b)
print(a * b)

a = (1, 2, 3)
b = (6,)
print(a * b)

a = (1, 2, 4)
b =(5, 6, )
zipped = zip(a, b)
print(zipped)
print(type(zipped))
print(list(zipped))


uname = input("Enter your name: ")
print(uname)
print(type(uname))
tname = tuple(uname.split(','))
print(tname)
print(type(tname)) # acer ('acer',) list 

a = "This is a game"
l = a.split()
print(l)
print(type(l))


uname = input("Enter your name: ")
print(uname)
nname = uname.replace(uname[0], 'K')
print(nname)

a = 1, 2, 3, 4
b = 5, 6, 7
c = a + b
print(c)

a = 1, 2, 3 # tuples
b = '4' # str
print(a + b)



a = 1, 2, 3, 4
b = 3,
print(a * b) # 1,2,3,4, 1,2,3,4 1,2,3,4

a = 'acer'
b = '3'
print(a + b) # acer, acer, acer

a = 1, 2, 3, 4
b = 5, 6, 7, 8

zipped = zip(a, b)
print(tuple(zipped))


a = 1, 2, 3, 4
b = 5, 6, 7

zipped = zip(a, b)
print(tuple(zipped))

# List 
color = ["blue",'white']
print( color.insert(-1, 'indigo') )
print(color) #

colors = 'white'
print(colors.upper())
print(colors)


color = ['blue', 'orange', 'green']
color = color.pop(3)
print(color) # IndexError: pop index out of range

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color1 = color.pop()
print(color1)
print(type(color1)) # green / blue, orange 

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color1 = color.remove('yellow')
print(color)
print(color1)




# list.append()

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color.insert(-1, 'syan')
print(color) # ['blue', 'orange', 'green', 'yellow', 'red','syan', 'black']

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color.insert(7 ,'syan')
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color.insert(len(color) ,'syan')
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color.append('syan')
print(color)


color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
color.insert(len(color) ,'syan', 'pink') # TypeError: insert expected 2 arguments, got 3
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
add_color = ('syan', 'pink')
color.insert(len(color) ,add_color) # TypeError: insert expected 2 arguments, got 3
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red', 'black']
add_color = ['syan', 'pink']
color.append(add_color)
color.append(['Deep Green', 'Light Green'])
print(color)

color.extend(['violet', 'ultraviolate'])
print(color)


# 
color = ['blue', 'orange', 'green', 'yellow', 'red']
color.append('syan')
print(color)

color.append(['deep green', 'light green'])
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red']
a = ['deep green', 'light green']
for i in a:
    print(i)
    color.append(i)
    print(color)
    
color = ['blue', 'orange', 'green', 'yellow', 'red']
a = 'deep green'
for i in a:
    print(i)
    color.append(i)
    print(color)
    

# .extend()   

color = ['blue', 'orange', 'green', 'yellow', 'red']
color.extend(['light green'])
print(color)
  
color = ['blue', 'orange', 'green', 'yellow', 'red']
color.extend(['light green', 'deep green', 'pink'])
print(color)

color = ['blue', 'orange', 'green', 'yellow', 'red']
color.extend(('light green', 'deep green', 'pink'))
print(color)


List methods:
    .insert(i, x)  : Insert the value x at index i 
    .append(x)     : Insert the value x at the end of the list 
    .extend(x)     : Insert all the values of iterable at the end of the list, in order 
    .pop(i)        : Remove and return the element at index i 
    
    
index based insert/ assignment 
color = ['blue', 'orange', 'green', 'yellow', 'red']
color[1] = 'White' 
print(color)

remove(x)          : It removes the element from the list, with the matching value 


# numeric method for list:
    
num = [1, 2, 3, 4, 5]

total = 0 
for n in num:
    total += n 
print(total)

# sum
num = [1, 2, 3, 4, 5]
total = sum(num)
print(total)

num = [1, 2, 3, 4, '5']
total = sum(num) # TypeError: unsupported operand type(s) for +: 'int' and 'str'
print(total)


umarks = list(int(input("Enter your all marks: "))) # TypeError: unsupported operand type(s) for +: 'int' and 'str'
total = sum(umarks)

umarks = input("Enter your all marks: ")
print(umarks)
print(type(umarks))

t = '35, 45'
t = int('35, 45')

umarks = input("Enter your all marks: ")

nlist = umarks.split(',')
print(nlist)

in_list =[] # Empty list 

for i in nlist:
    in_list.append(int(i))
    print(in_list)

print(sum(in_list))


# min()

a = [23, 45, 76]
print(min(a)) # 

num1 = input("Enter numeric value: ")

numlist = num1.split(',')

em_list = []

for i in numlist:
    em_list.append(int(i))

print(min(em_list))




# max() 
a = [23, 45, 76]
print(max(a)) # 

num1 = input("Enter numeric value: ")

numlist = num1.split(',')

em_list = []

for i in numlist:
    em_list.append(int(i))

print(max(em_list))


numbers = (1, 2, 3, 4, 5)
sqares = [num ** 2 for num in numbers]
print(sqares)

str_numbers = ["1.5", "2.3", "5.25"]
float_numbers = [float(values) for values in str_numbers]
print(float_numbers)


import random 

someWords = """ apple banana mango straberry oracle grape
pineapple appricot lenom coconut watermelon cherry papaya berry peach lychee muskmelon"""

someWords = someWords.split()
print(someWords)

word = random.choices(someWords)
#print(word)


str_word = word[0]
print(len(str_word))
guess_print = ('_ ' * len(str_word))
print('Guess the word! HINT: word is a name of a fruit')
print(guess_print)

    
 # index based insert/replace
.insert()
.pop()
.remove()
.append()
.extend()
sum()
min()
max()

# LIST COMPREHENSIONS:

Another way to create a list from an existing iterable 

numbers = (1, 2, 3, 4, 5)
sqares = (i for i in numbers)
print(sqares) # object
print(list(sqares))
print(tuple(sqares))
print(str(sqares))


numbers = (1, 2, 3, 4, 5)
sqares = (i ** 2 for i in numbers)
print(list(sqares))


# using For loop:
    
numbers = (1, 2, 3, 4, 5)

sqares = []

for i in numbers:
    sqares.append(i ** 2)
print(sqares)


str_numbers = ["1.5", "2.3", "5.25"]
float_numbers = [float(values) for values in str_numbers]
print(float_numbers)


str_numbers = ["1.5", "2.3", "5.25"]
float_numbers = (float(values) for values in str_numbers)
print(list(float_numbers))



# Nesting, Copying and Sorting Tuple and List:
    
1. Nesting: 
two_by_two = [[1, 2], [3, 4]]
print(len(two_by_two))

print(two_by_two[0])
print(two_by_two[1])

print(two_by_two[1][0])


2. Copying a List 

animals = ["lion", "tiger", "puma"]
large_cats = animals 
print(large_cat)
print(animals)

large_cat.append("Cheeta")

print(animals)
print(large_cats)


animals = ["lion", "tiger", "jaguar"]
large_cats = animals[:]
large_cats.append("cheeta")

print(animals)
print(large_cats)



matrix1 = [[1, 2], [3, 4]]
matrix2 = matrix1[:]

matrix2[0] = [5, 6]

print(matrix2)
print(matrix1)


matrix2[1][0] = 1 
print(matrix2)
print(matrix1)

# shallow copy 


List:
insert
append 
extend 
pop
remove 

sum 
min 
max 

# List Comprehensions 

numbers = (1, 2, 3, 4, 5)
print(numbers)
print(type(numbers))

list_nums = list(numbers)
print(list_nums)
print(type(list_nums))



numbers = (1, 2, 3, 4, 5)

list_num = list(numbers) # not requires 
emp_list_num = []

for i in list_num:
    emp_list_num.append(int(i ** 2))
    
print(emp_list_num)


numbers = (1, 2, 3, 4, 5)

list_numbers = (i ** 2 for i in numbers)
print(list(list_numbers)) # object 

list_numbers = [i ** 2 for i in numbers]
print(list_numbers)


st = "123456"
list_st = [int(i) ** 2 for i in st]
print(list_st)








# NESTING: TUPLE / LIST / DIC / SET 

t1 = ('acer', 12345, (1,  3, 2, 4, ('a', 'b'), 5 ), 6 ) # index based 
print(type(t1))

print(t1[0])
print(type(t1[0]))

print(t1[1])
print(type(t1[1]))

print(t1[2])
print(type(t1[2]))

print(t1[2][4][0])
print(type(t1[2][4][0])) # t1 > (1,  3, 2, 4, ('a', 'b'), 5 ) > ('a', 'b') > 'a'


matrix: 
    [1 1 1
     1 1 1
     1 1 1]
matrix = [[1, 1, 1],
          [2, 2, 2],
          [3, 3, 3]]

print(matrix) 
print(matrix[0][0]) 


# Copying a List 

a = 'acer'
b = a 
print(a)
print(b)
print(id(a))
print(id(b))

b = 'Lenovo'
print(f"a: {a}")
print(f"b: {b}")
print(id(a))
print(id(b))

a = "Acer"
b = "Acer"

print(f"a: {a}")
print(f"b: {b}")
print(id(a))
print(id(b))



a = ('a', 'b', 'c')
b = a 

print(f"a: {a}")
print(f"b: {b}")
print(id(a))
print(id(b))


a = ('a', 'b', 'c')
b = ('a', 'b', 'c')

print(f"a: {a}")
print(f"b: {b}")
print(id(a))
print(id(b))


car = ["audi", "bmw", "honda"]
new_car = car 

print(f"car: {car}")
print(f"new_car: {new_car}")
print(id(car))
print(id(new_car))

new_car.append("toyota")
print(f"car: {car}")
print(f"new_car: {new_car}")
print(id(car))
print(id(new_car))


car = ["audi", "bmw", "honda"]
new_car = car[:] 

new_car.append("toyota")

print(f"car: {car}")
print(f"new_car: {new_car}")
print(id(car))
print(id(new_car))


matrix1 = [[1, 2],
           [3, 4]]

matrix2 = matrix1[:]


print(f"matrix1: {matrix1}")
print(f"matrix2: {matrix2}")
print(id(matrix1))
print(id(matrix2))


matrix1 = [[1, 2],
           [3, 4]]

matrix2 = matrix1[:]

matrix2[0] = [5, 6]
print(f"matrix1: {matrix1}")
print(f"matrix2: {matrix2}")
print(id(matrix1))
print(id(matrix2))



matrix1 = [[1, 2],
           [3, 4]]

matrix2 = matrix1[:]

matrix2[1][0] = 7 
print(f"matrix1: {matrix1}")
print(f"matrix2: {matrix2}")
print(id(matrix1))
print(id(matrix2))

# Shallow Copy 


# deep copy 

import : Keyword 

import keyword
print(keyword.kwlist)

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']



import copy # module  method 

matrix1 = [[1, 2],
           [3, 4]]

matrix2 = copy.deepcopy(matrix1)

matrix2[1][0] = 7 
print(f"matrix1: {matrix1}")
print(f"matrix2: {matrix2}")
print(id(matrix1))
print(id(matrix2))


# Deleting Item from a list:
car = ["bmw", "audi", "tata", 'kia', 'mg', 'gm', 'ford']

# using .pop()

print(car)
car.pop(0) # "bmw"
print(car)

# using .remove() 

car.remove('mg') # "mg"
print(car)

# using del()

del car[1] # "tata"
print(car) 

car = ["bmw", "audi", "tata", 'kia', 'mg', 'gm', 'ford']
del car[3:6]
print(car)



a= '123456789101112131415161718'
print(a[::5])

def get_second_element(item):
    return item[1]

item = [(4, 1), (1, 2), (-9, 0)]

get_second_element(item)

item.sort(key=get_second_element)
print(item)

item = [(3, 6), (2, 4), (9, 5), (8, 0)]
get_second_element(item)
item.sort(key=get_second_element)
print(item)



color = ["red", "blue", "green"]
short_color = color.sort()
print(short_color) # None 


print(color)




print(id(1)) # 140724648617776
print(id(2)) # 140724648617808 

lst = [1, 2, 3, 4]
print(id(lst)) # 2544983239232

print(id(lst[0])) # 140724648617776
print(id(lst[1])) # 140724648617808 

print(id(lst[2])) # 140724648617840

print(id(3)) # 140724648617840 

a = 3 
print(id(a)) # 140724648617840   


.Nesting
.Copying 
.Sorting 


car = ["bmw", "audi", "ford", "kia", "tata"]

# remove from list based on index [2] 

car.pop(2) # ford

# remove from list based on string/value  # tata

car.remove("tata") 

print(car) #


car = ["bmw", "audi", "ford", "kia", "tata", "hyundai", "toyota"]

# del  # index based 

del car[3:5] 
print(car)

del car[1]
print(car)



# 

a = 10  # int

print(id(a))  140724648618064

b = 10, # tuples 
print(id(b)) # 2544982180992

print(id(b[0]))  140724648618064



b = (10, 20) # tuple 

print(id(b))  # 






c = [10, 20, 30] # list 

print(id(c[0])) 140724648618064




# Sorting: 
    

a = [1, 3, 5, 7] 
b = [7, 1, 8, 3, 6] 

b.sort()
print(b)


c = [3, 12, 87, 2, 4]

print(b)
print(c)

b.sort(reverse = True)
print(b)


b.sort(reverse = False)
print(b)


.sort(key) # 

def get_second_number(uma):
    return uma[2]

a = [4, 1, 5, 3, 7, 8]

get_second_number(a)


def get_second_number(lst):
    return lst[1]

a = [(4, 9), (5, 6), (7, 1)]
a.sort(key=get_second_number)
print(a)


def get_second_number(lst):
    return lst[0]

a = [(9, 3), (5, 6), (1, 8)]
a.sort(key=get_second_number)
print(a)



1. Check if a list contains an element

top_car = ["audi", "bmw", "ford", "toyota", "tata"]

b = "tata" 

print(b in top_car)


2. How to iterate over 2+ lists at the same time

car = ["audi", "bmw", "ford", "toyota", "tata"]
price = [10000, 34355, 35432, 34657, 345243]
year = [1998, 1987, 1881, 1984, 1973]

a = zip(car, price, year)
for car, price, year in a:
    print(f"Top car brand {car} and its base Price {price} manufacturing year {year}")


a = (10, 20)

b, c = a 
print(b, c)

4. Is a list mutable? 

car = ["bmw", "audi"]
car[0]="ford"
print(car)

5. Does a list need to be homogeneous? 

a = ["audi", 1234, ["bmw", 4567], ("tata", "1234")]
print(a)

6. What is the difference between append and extend?

car = ["audi", "bmw", "ford", "toyota", "tata"]
print(car)
car.append("mahindra")
print(car)


car = ["audi", "bmw", "ford", "toyota", "tata"]
print(car)
car.extend("mahindra")
print(car)

car = ["audi", "bmw", "ford", "toyota", "tata"]
t = ["mahindra"]
car.extend(t)
print(car)


car = ["audi", "bmw", "ford", "toyota", "tata"]
print(car)
car.append(("mahindra", "kia"))
print(car)
car.append(["mahindra", "kia"])
print(car)

car = ["audi", "bmw", "ford", "toyota", "tata"]
print(car)
car.extend("mahindra")
print(car)

car = ["audi", "bmw", "ford", "toyota", "tata"]
t = ("mahindra", "kia")
car.extend(t)
print(car)

car = ["audi", "bmw", "ford", "toyota", "tata"]
t = ["mahindra", "kia"]
car.extend(t)
print(car)



7. Do python lists store values or pointers?

# pointer 


8. What does “del” do?

l1 = [1, 2, 3, 4, 5, 6]
print(l1)
del l1[3] # [1, 2, 3, 5, 6]
del l1[l1.index(5)] # [1, 2, 3, 6]
print(l1) # 

l1 = [1, 2, 3, 4, 5, 6]

| 1 | 2 | 3 | 4 | 5 | 6 |
0   1   2   3   4   5   

print(l1)
del l1[2:4] # : slicing 
del l1[2:5]
print(l1)


9. What is the difference between “remove” and “pop”?

# remove accept values
# pop accepts index 
# pop return the deleted value 
# remove returns None 
 # .pop()
car = ["BMW", "AUDI", "FORD", "TATA"]
print(car)
a = car.pop(car.index("FORD")) 
print(car)
print(a)

# .remove()
car = ["BMW", "AUDI", "FORD", "TATA"]
print(car)
a = car.remove("FORD") 
print(car)
print(a)


10. Remove duplicates from a list

li = [3, 2, 1, 3, 1, 4, 6, 3, 7]

eli = []

for i in li:
    if i not in eli:
        eli.append(i)
    print(eli)
    
# SET Data type 

li = [3, 2, 1, 3, 1, 4, 6, 3, 7] 
nli = list(set(li))
print(nli)   



11. Find the index of the 1st matching element

car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]

print(car.index("BMW"))
print(car.index("BMW",1, 5))

print(car.index("BMW", car.index("BMW") + 1 ))

print(car.index("BMW", car.index("BMW", car.index("BMW") + 1 ) + 1))



12. Remove all elements from a list

car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
del car[:] # 
print(car)
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
del car[:3] 
print(car)
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
del car[-3:]
print(car)
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
del car[1:5]
print(car)
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
del car[-1]
print(car)





13. Iterate over both the values in a list and their indices # enumerator  / interpolation f string

car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]
print(list(enumerate(car)))

car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"]

for inx, val in enumerate(car):
    print(f"Car brand {val} and it's index number {inx}")
    #print("car brand " + val + " it's index number " + str(inx)) 
    

14. How to concatenate two lists

car = ["BMW", "AUDI", "FORD", "TATA"]
car2 = ["TOYOTA", "KIA"]
    
car.extend(car2) 
print(car)

car = ["BMW", "AUDI", "FORD", "TATA"]
car2 = ["TOYOTA", "KIA"]

print(car + car2)
print(car)
print(car2)


15. How to manipulate every element in a list with list comprehension

la = [2, 3, 4, 5, 6] 
b = 5 

c = [i + b for i in la ]
print(c)
 

for i in la:
    print(i + 5)


16. Count the occurrence of a specific object in a list

car = ["BMW", "AUDI", "FORD", "TATA", "AUDI", "KIA", "BMW", "AUDI"]

print(car.count("BMW"))
print(car.count("AUDI"))
  

 
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"] 

for inx, val in enumerate(car):
    #print(inx, val)
    if val =="BMW":
        
        print(inx, val)

 
car = ["BMW", "AUDI", "FORD", "TATA", "BMW", "AUDI", "BMW"] 

c= [ ind for ind, val in  enumerate(car) if val == "BMW"]
print(c)




17. How to shallow copy a list? 

a = [1, 2, 3, 4, 5]
b = a 

print(a)
print(b)

b[1] = 6
print(a)
print(b) # copy 

print(id(a))
print(id(b))
.copy()

a = [1, 2, 3, [4, 5]]
b = a.copy()
b[3][0] = 6
print(a)
print(b)
print(id(a))
print(id(b))

18. Why create a shallow copy of a list? 

when we need a copy of reference number 


19. How to deep copy a list? 

import copy 
a = [1, 2, 3, [4, 5]]
b = copy.deepcopy(a)
b[3][0] = 6
print(a)
print(b)
print(id(a))
print(id(b))

20. What is the difference between a deep copy and a shallow copy?

a = [1, 2, 3, 4, 5]
b = a 
print(a)
print(b)

b.pop(-1)
print(f"B: {b}")

print(f"A: {a}")

print(id(a))
print(id(b))

2027048158208
2027048158208


# .copy()

a = [1, 2, 3, 4, 5]
b = a.copy() 

print(f"B: {b}")
print(f"A: {a}")

b.pop(-1)
print(f"B: {b}")
print(f"A: {a}")

print(id(a))
print(id(b))



a = [1, 2, 3, [4, 5], 6]
b = a.copy() 

print(f"A: {a}")
print(f"B: {b}")

b[3][0] = 7 

print(f"B: {b}")
print(f"A: {a}")

print(id(a))
print(id(b))

2027044764928
2027048063424


import copy

a = [1, 2, 3, [4, 5], 6]

b = copy.deepcopy(a) 

print(f"A: {a}")
print(f"B: {b}")

b[3][0] = 7 

print(f"B: {b}")
print(f"A: {a}")

print(id(a))
print(id(b))

2027048144256
2027048094464


21. What is the difference between a list and a tuple. 

Tuple : (,) [, compulsory]

a = ("uma",)
print(a)
print(type(a))

a = "uma",
print(a)
print(type(a))

a = 123,
print(a)
print(type(a))

a = (1, 2, 3)
print(a)
print(type(a))

Tuple: immutable [we can not change the value of immutable data type]


List = []
a = [1]
print(a)
print(type(a))
List : mutable [we can  change the value of immutable data type]


22. Return the length of a list


a = [1, 2, 3, [4, 5], 6]
print(len(a))
 

25. Multiply every element in a list by 5 with the map function

map(fn, a)

def multiply_by5(val):
    return val * 5


a = [10, 20, 30, 40, 50]

multiply_by5(10)

res_list = []
for i in a:
    res_list.append(multiply_by5(i))
    
print(res_list, end=' ')
    

def multiply_by5(val):
    return val * 5


a = [10, 20, 30, 40, 50]
print([val for val in map( multiply_by5, a)])


26. Combine 2 lists into a list of tuples with the zip function

a = [1, 2, 3, 4, 5]
b = ['a', 'b', 'c', 'd', 'e']

res = zip(a, b)
print(res)
print(type(res))

print(list(res))

a = [1, 2, 3, 4]
b = ['a', 'b', 'c', 'd', 'e']

res = zip(a, b)
print(list(res))

    
a = [1, 2, 3, 4]
b = ['a', 'b', 'c', 'd', 'e']
c = ["acer", "lenovo", "dell"]

res = zip(a, b, c)
print(list(res))  
    
a = [1, 2, 3, 1, 5, 3, 1]

dup = [i[1] for i in enumerate(a) if a.count(i[1]) > 1]
print(set(dup))

c = a.count(1)
print(c)

27. Insert a value at a specific index in an existing list

car = ["BMW", "AUDI", "KIA", "FORD"]
car.insert(2, "TATA")

print(car) # ["BMW", "AUDI", "TATA", "KIA", "FORD"]

car = ["BMW", "AUDI", "KIA", "FORD"]
car[2] = "TATA"

print(car) # ["BMW", "AUDI", "TATA", "FORD"]


car = ["BMW", "AUDI", "KIA", "FORD"]
car.insert(8, "TATA")
print(car)

car = ["BMW", "AUDI", "KIA", "FORD"]
car.append("TATA")
print(car)

28. Subtract values in a list from the first element with the reduce function


import functools

car = ["BMW", "AUDI", "KIA", "FORD"]


print(dir(functools))


import Roll_Dice
print(dir(Roll_Dice))

Roll_Dice.d5()




universities = [
['California Institute of Technology', 2175, 37704],
['Harvard', 19627, 39849],
['Massachusetts Institute of Technology', 10566, 40732],
['Princeton', 7802, 37000],
['Rice', 5879, 35551],
['Stanford', 19535, 40569],
['Yale', 11701, 40500]
]


print(universities)


[1, 2, 3, 4, 5, 6] / 2 3 

a = [232, 3452,4 , 4563] sum(a) / 4 mean 




universities = [
['California Institute of Technology', 2175, 37704],  # univer name / student / tutions fees 
['Harvard', 19627, 39849],
['Massachusetts Institute of Technology', 10566, 40732],
['Princeton', 7802, 37000],
['Rice', 5879, 35551],
['Stanford', 19535, 40569],
['Yale', 11701, 40500]
]

univ = []
stu = []
tf = []
for i in universities:
    print(i)
    univ.append(i[0])  #'California Institute of Technology', 'Harvard'
    stu.append(i[1]) # 2175, 19627
    tf.append(i[2]) # 37704, 39849
    

print(univ)
print(stu)
print(tf)


stu = [2175, 19627, 10566, 7802, 5879, 19535, 11701]
tf = [37704, 39849, 40732, 37000, 35551, 40569, 40500]

sum_stu = sum(stu) / len(stu)
mid = len(stu)/2
print(mid)
print(sum_stu)


# DATA TYPE METHODS:
    
int  
string : [len, find, strip, lstring, rstrip, split, upper, lower] / immutable 
tuple  : [index, remove, ] / immutable
list   : [pop, insert, append, sum, remove, del, extend, ]

a = "acer" 
print(dir(a))

['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

a = ("ACER", "HP")
print(dir(a))
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']

a = ["acer"]
print(dir(a))
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


a = 10
print(dir(a))

['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']


# DICTIONARY DATATYPE:
    
clock: dic 
car: dic 

car: meaning 
key : value 
order 
  : wheel 
 car: 
 bike:
 cycle: 
     
     
Vechicle :  

fish: 
    
    
CAR: a passenger vehicle designed for operation on ordinary roads and typically having four wheels and a gasoline or diesel internal-combustion engine

FISH : a passenger vehicle designed for operation on ordinary roads and typically having four wheels and a gasoline or diesel internal-combustion engine    


PYTHON DUCTIONARY:
    
KEY: VALUE 

car : fish 
fish: a passenger vehicle designed for operation on ordinary roads and typically having four wheels and a gasoline or diesel internal-combustion engine

    

(1, 2, 3, 4,...)
 0  1  2  4,..n
[1, 2, 3, 4....]
 0, 1, 2, 3...n
 
{key:value, key:value,....} 


state = ['odisha', 'AP', 'TL', 'MP']
capital = ['BBS', 'AMRAVATI', 'HYD', 'BHOPAL']

state_capital = zip(state, capital)
print(list(state_capital))

state_capital = {'OD': "BBS", 'AP': "AMB", 'TL': "HYD", 'MP': "BPL"}

print(state_capital)

state_capital = {'OD' : "BBS", 'AP' : "AMB", 'TL' : "HYD", 'MP' : "BPL"}
print(state_capital)

state_capital = {'DL' : "BBS", 'AP' : "AMB", 'TL' : "HYD", 'MP' : "BPL"}

state_capital = {1 : "BBS", 'AP' : "AMB", "RED" : "HYD", 2 : "BPL"}
print(state_capital)

state_capital = {(1,2) : "BBS", 'AP' : "AMB", "RED" : "HYD", 2 : "BPL"}
print(state_capital)


strudent_marks = {'uma': (56, 78, 90, 45), 'sadhna': (78, 56, 40, 80), 'tanjima': (90, 56, 78, 69)}
print(strudent_marks)
strudent_marks = {'uma': [56, 78, 90, 45], 'sadhna': [78, 56, 40, 80], 'tanjima': [90, 56, 78, 69]}
print(strudent_marks)


emp_dic = {}
print(emp_dic)
print(type(emp_dic))

emt_dict = dict()
print(emt_dict)
print(type(emt_dict))

# DICTIONARY: DATA STRUCTURE 
    
it stores the values in KEY and VALUES pair 
{key:value, key:value}

key: key can be immutable data type 
int, str, tuple 
value: values can be immutable or mutable data type 
int, str, tuple, list 

(2, 3, 4, 56, ) > 1

# Key as String Data type
capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"}
print(capital)
print(type(capital))

# Key as int data type 
stud = {1: "Uma", 2: "Sadhan", 3: "Tanjima"}
print(stud)
print(type(stud))

# Key as tuple Data type

marks = {(45, 68, 90): "UMA", (70, 60, 80): "SADHAN", (90, 80, 70): "Tanjima"}
print(marks)
print(type(marks))


# Accessing Dictionary Values 

print(capital['India'])
print(stud[1])
print(marks[(45, 68, 90)])

print(marks[45]) # KeyError: 45 


print(stud[4]) # KeyError: 4 

roll = [1, 2, 3]
str = ['uma', 'sadhna', 'tanjima']

print(roll[1] )


customer_id = {'U1': 'S1', 'R1', 'R2', 'F1', 'L1'}
print(customer_id) # SyntaxError: invalid syntax

ac = ('S1', 'R1', 'R2', 'F1', 'L1',(1, 2, 3))

customer_id = {'U1': ac}
print(customer_id)

customer_id = {'U1': ('S1', 'R1', 'R2', 'F1', 'L1')}

flag = 'S1' in customer_id

if flag:
    print("customer exist")
else:
    print("customer does not exists")
    
    
    

print(customer_id.get('U1'))
print(customer_id.get('S1')) #  


# Adding and Removing values in a Dictionary 

capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"}
print(capital)
capital['Japan'] = "Tokyo"
print(capital)

capital['India'] = 'BBS'
print(capital)


# del
capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
print(capital)

del capital['Bhutan']
print(capital)

del capital[] # SyntaxError: invalid syntax
print(capital)


capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
print(capital)
del capital

 
capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 

capital.pop('India')
print(capital)


print(dir(dict))

['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']

capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
capital.popitem('India') # TypeError: popitem() takes no arguments (1 given)
print(capital)


capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
capital.popitem() 
print(capital)



import tkinter as tk

root = tk.Tk()
test = tk.Label(root, text="Red", bg="red", fg="white")
test.pack(ipadx=30, ipady=6)
test = tk.Label(root, text="Purple", bg="purple", fg="white")
test.pack(ipadx=8, ipady=12)
tk.mainloop()



capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 

{}
dict()

dictionary[key] = value 

dictionary.pop()
dictionary.popitem()
del dictionary[key]

# Python Dictionary Method:
1.clear() 

capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
print(len(capital))

capital.clear()
print(capital)

2. copy():

capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 

temp_cap = capital.copy()
print(temp_cap)

3. fromkeys()

a = (1, 2, 3, 4)
b = ("acer")

new_dict= {}.fromkeys(a)
print(new_dict)

new_dict= {}.fromkeys(a, b)
print(new_dict)


a = (1, 2, 3, 4)
b = ["acer"]

new_dict= {}.fromkeys(a)
print(new_dict)

new_dict= {}.fromkeys(a, b)
print(new_dict)

b.append("lenovo")
print(new_dict)


a = (1, 2, 3, 4)
b = ["acer"]

new_dict = {x:b for x in a}
print(new_dict)

b.append("dell")
print(b)
print(new_dict)

a = (1, 2, 3, 4)
b = ["acer"]

new_dict = {x:list(b) for x in a}
print(new_dict)

b.append("dell")
print(b)
print(new_dict)


capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 

ndict = capital.setdefault("Japan")

print(capital)
print(ndict)

capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 

ndict = capital.setdefault("Japan","Tokyo")

print(capital)
print(ndict)

marks = {'Physics':67, 'Maths':87}
internal_marks = {'Practical':48}

marks.update(internal_marks)
print(marks)


marks = {'Physics':67, 'Maths':87}
marks.update({'Physics':80})
print(marks)


capital = {'India': "New Delhi", 'Nepal': "Kathmandu", 'Bhutan': "Thumpu"} 
print(capital.items())
print(capital.keys())


def get_key(dic, val):
    for key, value in dic.items():
        if val == val:
            return key 
        
        
        
my_dict = {"java":100, "python":112, "c":11}

get_key(my_dict, '100')

DICT: 
    
create dictionary: {key:value}
create dictionary with dict function: dict() 
insert: dictionary[key] = value / if key already exists then it will be replaced, if key does not exists then it will be added to the dictionary 
how to fetch data from Dictionary 

by using key: 
dictionary_name[key] # KeyError 
.get() 
dictionary_name.get(key) # None 

pop() 
dictionary.pop(key)
popitem() 
dictionary.popitem() # no argument 
del dictionary_name[key]
del dictionary_name[] # error 
del dictionary_name 


# Clear 

marks = {'math':90, 'eng':70, 'sci':80}
print(marks)
del marks 
print(marks)

marks = {'math':90, 'eng':70, 'sci':80}
print(marks)
marks.clear() 
print(marks)



# Copy()
marks = {'math':90, 'eng':70, 'sci':80}
marks1 = marks.copy()
print(marks)
print(marks1)

marks1['hist'] = 65
print(marks)
print(marks1)


# fromkeys 

a = [1, 2, 3, 4]
my_dict = {}.fromkeys(a) # Value: None
print(my_dict)

a = ["acer", "dell", "hp"]
b = ["laptop", "desktop"]

my_dict = {}.fromkeys(a, b)
print(my_dict)

b.append("minitop")
print(my_dict)


a = ["acer", "dell", "hp"]
b = ["laptop", "desktop"]

my_dict = {x:list(b) for x in a}
print(my_dict)

b.append("minitop")
print(my_dict)

# get()

# items 
marks = {'math':90, 'eng':70, 'sci':80}
print(marks.items()) # view  

marks = {'math':90, 'eng':70, 'sci':80}
a = marks.items()
print(type(a)) # view 

# keys 
marks = {'math':90, 'eng':70, 'sci':80}
print(marks.keys())

# pop()

# popitem()

# setdefault()

dict_name.setdefault(key) # {} return value / key:None 
dict_name.setdefault(key, value) # {} return value / key:None 

marks = {'math':90, 'eng':70, 'sci':80}
print(marks.setdefault('math')) # 90 

marks = {'math':90, 'eng':70, 'sci':80}
print(marks.setdefault('hist')) # None
print(marks)

marks = {'math':90, 'eng':70, 'sci':80}
print(marks.setdefault('hist',50)) # None
print(marks)


# update 
marks = {'math':90, 'eng':70, 'sci':80}

marks.update({'math':95})
print(marks)

marks.update({'hist':95})
print(marks)

a = {'hist':90}
marks.update(a)
print(marks)

# Add / Merge Two dictionary
a = {1:'a', 2:'b'}
b = {3:'c', 4:'d'}

a.update(b)
print(a)

a = ['hin',70]
marks.update(a) # ValueError: dictionary update sequence element #0 has length 3; 2 is required
print(marks)

marks = {'math':90, 'eng':70, 'sci':80, 'hist':90}

def get_key(mdic, pvalue):
    for key, value in mdic.items():
        if value == pvalue:
            return key 
        
        

marks = {'math':90, 'eng':70, 'sci':80, 'hist':90}
get_key(marks, 90)




key_list = []
def get_key(mdic, pvalue):
    for key, value in mdic.items():
        if value == pvalue:
            key_list.append(key)
            
    return key_list
            
        
        
key_list = []
marks = {'math':90, 'eng':70, 'sci':80, 'hist':90, 'odi':90}
get_key(marks, 90)


# Date: 17 Aug 2021:
    
#Dictionary:

    clear
    fromkeys
    item 
    keys 
    default 
    update 
    copy 
    values 
    
    
marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}

print(marks.get()) # TypeError: get expected at least 1 argument, got 0

print(marks.get('mil')) # None 
print(marks.get('math'))

marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}

print(marks.values())
print(marks.keys())

mrk = 70 
print(marks.get(mrk))

print(mrk in marks.values()) # 
print(mrk in marks) # 


marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}

print(type(str(marks)))


# Buit In Function 

all(): Shows true element if all keys are available in dictionary 
any(): Shows true values if the key dictionary is true 
len(): Shows length of items 
sorted(): shows a novel arrangement list of keys 


marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}
print(all(marks))


marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}
print(sorted(marks))


marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}

marks1 = {'math':80, 'eng':70}


# QUESTION:
    
1. Write a program to check if a given key is already exists in a dictionary 

d = {1:10, 2:20, 3:30, 4:40, 5:50, 6:60}

#marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}



x = input("Enter a Dictionary Key: ") # Str 

if x.isnumeric():
    x = int(x)

if x in d.keys():
    print(f"Key {x} is  available in the DIctionary")
else:
    print(f"Key {x} is not available in the DIctionary")




marks = {'math': 90, 'eng': 70, 'hin': 80, 'sci': 75}
x = input("Enter a Dictionary Key: ") # Str 

if x.isnumeric():
    x = int(x)

if x in marks.keys():
    print(f"Key {x} is  available in the DIctionary")
else:
    print(f"Key {x} is not available in the DIctionary")


2. Write a script to read number n and print a dictionary in the form(x: x*x)

x = int(input("Enter a number:"))
ed = dict() 

for i in range(1, x+1):
    ed[i] = i * i 
    
print(ed)


3. Write a python program to map two list into a dictionary. 

keys = ['r', 'g', 'b', 'y', 'w']
values = ['red', 'green', 'blue', 'yellow', 'white']

#Output: (r:red, g:green, b:blue, y:yellow, h:white)

color = dict(zip(keys, values))
print(color) # <zip object at 0x00000216472FD2C0>

4. Write a program to bombine two dictionary adding values for common keys.
dict1 = {'v':50, 'x':100, 'y': 300, 'z':600}
dict2 = {'x':200, 'y':50, 'z':100} 
    
from collections import Counter 
d = Counter(dict1) + Counter(dict2)
print(d)
 

keys = ['r', 'g', 'b', 'y', 'w']
values = ['red', 'green', 'blue', 'yellow', 'white']
    
from collections import Counter 
d = Counter(keys) + Counter(values)
print(d)    
    
dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100'} 
from collections import Counter 
d = Counter(dict1) + Counter(dict2)
print(d)  


dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100'} 

1. dict1[key]
2. check if dict1[key] in dict2[key]
3. if Ture 
    int(dict1[key]) + int(dict2[key])
4. add in new dictionary 
5 if false then new dictionary 




#------------------------------------------------------------------------------
-------------------------------------------------------------------------------

dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100'} 

1. dict1[key]
2. check if dict1[key] in dict2[key]
3. if Ture 
    int(dict1[key]) + int(dict2[key])
4. add in new dictionary 
5 if false then new dictionary


dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100'} 
dict1_key = dict1.keys()
dict2_key = dict2.keys()
print(dict1_key)
print(dict2_key)

new_dict = dict()

for i in dict1_key:
    print(i)
    if i in dict2_key:
        new_dict[i] = int( dict1[i] ) + int( dict2[i] )
        #print(new_dict)
    else:
        new_dict[i] = dict1[i]
        
print(new_dict)





dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100', 'a':'90'} 
dict1_key = dict1.keys()
dict2_key = dict2.keys()

dict_set = set(list(dict1_key) + list(dict2_key))
print(dict_set)

new_dict = dict()

for i in dict_set:
    print(i)
    if i in dict2_key and i in dict1_key:
        new_dict[i] = int( dict1[i] ) + int( dict2[i] )
        #print(new_dict)
    else:
        if dict1.get(i) != None:
            new_dict[i] = dict1.get(i)
        else:
            new_dict[i] = dict2.get(i)
            
        
        
print(new_dict)


############################################################################################################
Date: 18 Aug 2021
############################################################################################################

#Q:  Write a program to find the highest three values in a dictionary 

from heapq import nlargest 

my_dict = {'a':500, 'b':225, 'c':560, 'd':400, 'e':840, 'f':120}
three_largest = nlargest(3, my_dict, key=my_dict.get)
print(three_largest)


a = [(1, 5), (3, 4)]
print(max(a))


def get_second_number(lst):
    return lst[1]

a = [(9, 3), (5, 6), (1, 8)]
a.sort(key=get_second_number)
print(a)

my_dict = {'a':500, 'b':225, 'c':560, 'd':400, 'e':840, 'f':120}
a = list((my_dict.items()))
print(a[0][1])

def get_second_number(lst):
    return lst[1]

a.sort(key=get_second_number)
print(a[-3:]) 


a = {1, 2, 3, 4, 5}
print(a)

a.add(5)
print(a)

my_set = {(1, 2)}
print(my_set)

my_set.update(([3, 4, 5, 6]))
print(my_set)

for i in my_set:
    print(i)



dict1 = {'v':'50', 'x':'100', 'y': '300', 'z':'600'}
dict2 = {'x':'200', 'y':'50', 'z':'100', 'a':'500'}

dict2 = {'x':'200', 'y':'50', 'z':'100', 'a':'500', 'm':{'c':100, 'd':200}}
print(dict2['m']['c'])

# Q5: Write a program to find the highest three values in a dictionary:
    


#output: n_dict ={ 'z':600, 'a':450, 'y':300 } 

dict1 = {'v':50, 'x':100, 'y': 300, 'z':600, 'a':450}
a = list(dict1.items())
def get_second_number(lst):
    return lst[1]

a.sort(key=get_second_number, reverse=True)
x= a[:3]
print(dict(x))


from heapq import nlargest 
dict1 = {'v':50, 'x':100, 'y': 300, 'z':600, 'a':450}
three_larges = nlargest(3, dict1, key = dict1.get)
print(three_larges)


# Q6: Write a program to remove a key from  a dictionary 

my_dict = {'a':500, 'b':225, 'c':560, 'd':400, 'e':840, 'f':120}

rKey = input("Enter a key to remove from the Dictionary: ") 

if rKey in my_dict:
    my_dict.pop(rKey)
else:
    print("Key is not available!")
    
    
print(my_dict)
-------------------------------------------------------------------------------------------------------------
#############################################################################################################
Date: 19 Aug 2021
-------------------------------------------------------------------------------------------------------------


# SET:
Set is a simply unordered collection of distinct hashable objects.  

Define: we can define a set using curly brackets {} 

immutable objects: Hashable value 

set is a mutable object 

there is no key value available for the set  


There are 2 types of set available 

SET [mutable]
FROZENSET [immutable]


# How to create set 

a = {} # empty set 

a = set() # empty set 

a = {1, 2, 3, 4}
print(a)
print(type(a))



a = {4, 3, 1, 5, 2, 1, 7, 2, 4, 1} 
print(a)
print(type(a))


a = {'a', 'b', 1, 'c', 2, 5, 3, }
print(a)
print(type(a))

a = {1, 3, 5, 2, 'a', 'c', 'b', (1, 'b', 2, 'a')} 
print(a)


a = {1, 2, 'a', (1, 'a', ['1', 'a'])}
print(a) # TypeError: unhashable type: 'list' 


myset = set((1, 2, 3))
print(myset)

myset = set([1, 2, 3, 4])
print(myset)



print(dir(myset))

['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']

# number of elements:
    
a = {1, 2, 3, 4}
print(len(a))

a = {4, 3, 1, 5, 2, 1, 7, 2, 4, 1}
print(len(a))


# Add or remove elements from a set  
a = {1, 2, 3, 4}
a.add(5)
print(a)

a = {1, 4, 3, 5}
a.add(2)
print(a)

a = {'a', 'b','d'}
a.add('c')
print(a)

a.add((1, 3, 2))
print(a)

a = {1, 2, 3, 4}
a.add([5, 6, 7, 8]) # TypeError: unhashable type: 'list'
print(a)


a = {1, 2, 3, 4}
a.update([5, 6, 7, 8])
print(a)


set1 = set([1, 2, 3, 4])
set2 = set([5, 6, 7, 1])

set1.update(set2)
print(set1)


#  Remove 

myset = set([1, 2, 3, 4, 5, 6])
print(myset)

myset.remove(3)
print(myset)

myset = set([1, 2, 3, 4, 5, 6])
myset.discard((2, 3, 4))
print(myset)


# Set Data type / Datastucture 

collection elements hetorogenius 
duplicates are not allowed 
insertion order is not preserved.
indexing and slicing not allowed for the set 
['a', 'b', 'c']
  0    1    2  
 [0:1]
 [] 
 
{'a', 'b', 'c'}  no index / no slicing   

l = ['a', 'b', 'c']
print(l[1:])

set is a mutable type 

int / str/ tuple  : immutable data type

list / dict / set : mutable data type 

how to create set:

{} : int / str / tuple 
set() : iterables items [int is not an iterable item]

a = {10}
print(a)
print(type(a))

a = set(10) # TypeError: 'int' object is not iterable
print(a)
print(type(a))


a = set(('x', 1, (8, 9)) ) # str 
print(a)
print(type(a))

a = set(('a',)) # tuple
print(a)
print(type(a))


a = set([1, 2, 3, 4]) # list
print(a)
print(type(a))


# How to add new values to a set 
1. add(x) 

a = {2, 4, 6, 8}
print(a)
a.add(10)
print(a)

a.add(1)
print(a)

a = {'a', 'd', 'x', 'f'}
a.add('c')
print(a)


a.add('b', 'l')  # TypeError: add() takes exactly one argument (2 given)
print(a)

n = ('b', 'l')
a.add(n)
print(a)



2. update() 

a = {'a', 'd', 'x', 'f'}
a.update('z', 'b')
print(a)


a = {1, 2, 3, 4}
b = {'a', 'b', 'c', 'd'}

a.update(b)
print(a)

print(a+b)

a = 'acer'
b = 'lenovo'

print(a+b)

a = {1:'a', 2:'c'}
b = {3:'b'}

a.update(b)
print(a)

a = (1, 2, 3)
b = (4, 5)

print(a+b)

a = [1, 2, 3, 4]
b = ['a', 'b', 'c', 'd']

print(a+b)


Note: we can concatinate two varibale using + operator if the data type of the 
both variable is in [str, list, tuple] and same type
Note: if want to concatinate dictionary and set then we have to use .update() 
Note: Int data type does not support concatinate 
a = 123 
b = 'abd'
print(a + b)  # TypeError: unsupported operand type(s) for +: 'int' and 'str'

a = (1, 2, 3)
b = [4, 5, 6]
print(a+b) # TypeError: can only concatenate tuple (not "list") to tuple


a = 200 
b = 204 
print(a+b)


Q1. Which of the following are valid for set ? 

s = set() # set 
1. s.add(10) # True  /  True
2. s.add(10, 20, 30) # False / False 
3. s.update(10) # True  / True 
4. s.update(10, 40, 50)   # True  / False 


s = set()
s.add(10)
print(s) # True 

s = set()
s.add(10, 20, 30)
print(s) # False 


s = set()
s.update((10,))
print(s) # TypeError: 'int' object is not iterable

s = set()
s.update((10, 40, 50))
print(s) # TypeError: 'int' object is not iterable


# copy()
Returns copy/duplicate of the set 
it is cloned object. 

s = {10, 20, 30}
s1  = s.copy()
print(s)
print(s1)

print(id(s))
print(id(s1))

s.add(40)
print(s)
print(s1)

s = {10,( 20, 30)}
s1  = s.copy()
print(s)
print(s1)

s.add(40)
print(s)
print(s1) 

# Shallow Copy 
# Deep Copy 

s = [10,[ 20, 30]] # list
s1  = s.copy()
print(s)
print(s1)

s[1][1] = 40 
print('s', s)
print('s1', s1) 


#  pop():
It removes and returns some random element from the set 

s = {40, 10, 30, 20}
print(s)
print(s.pop())

s = {10, 20, 30}
print(s.pop())

s = {'40', '10', '30', '20'}
print(s)
print(s.pop())

s = {'40', '10', '30', '20'}
print(s)
print(s.pop('30')) # TypeError: pop() takes no arguments (1 given)

s = {10, 20, 30}
print(s.pop())

# Remove 
It removes specified element from the set 
if the specified element is not present in the list then it will raise KeyError


s = {'40', '10', '30', '20'}
s.remove('30')
print(s)

s = {'40', '10', '30', '20'}
s.remove()
print(s) # TypeError: remove() takes exactly one argument (0 given)

s = {'40', '10', '30', '20'}
s.remove('60')
print(s) # KeyError: '60'



Set:
    
dic = {1:'a', 2:'b', 3:'c'}
print(dic[2]) # 
print(dic.get(2)) # 

aset = {1, 2, 3, 4, 5, 6}
print(aset)
aset.remove(3) 
print(aset)

aset = {1, 2, 3, 4, 5, 6}
print(aset)
aset.remove(7) # KeyError: 7
print(aset)

# DISCARD

aset = {1, 2, 3, 4, 5, 6}
print(aset)
aset.discard(3)
print(aset)

aset = {1, 2, 3, 4, 5, 6}
print(aset) # {1, 2, 3, 4, 5, 6}
aset.discard(7)
print(aset) # {1, 2, 3, 4, 5, 6}

# RANGE 

# 

# SET IN FOR LOOP: 
    

aset = {1, 2, 3, 4, 5, 6}
for i in aset:
    if i == 2:
        print(i + 10)
    else:
        print(i)
        
        
        
        
# Write a program to print different vowels present in a given ward? 

wi = input("Enter word to search for vowels:")

s = set(wi)
v = {'a', 'e', 'i', 'o', 'u'}

for i in s:
    if i in v:
        print(f"Presenting the vowel in the given word: {i}")
    


# Matha matical Operations on the set:
    

1.  UNION: 
    
We can use this function to return all elements present in both the sets 

syntax: x.union(y)

x.union(y) or x|y 

x = {10, 20, 30, 40}
y = {30, 50, 40, 60}

print(x.union(y)) # {10, 20, 30, 40, 50, 60}
print(x|y) #


x = {10, 20, 30, 40}
y = {30, 50, 40, 60}
z = {60, 10, 40, 50}

print(x.union(y).union(z)) 
print(x|y|z)

2. INTERSECTION():
    
x = set()
y = set()    

Returns common elements presented in both x and y  or sets 

syntax: x.intersection(y) 

x.intersection(y)   or x & y 

x = {10, 20, 30, 40}
y = {30, 50, 40, 60}

print(x.intersection(y)) # 30, 40
print(x & y)
    
3. difference():

Returns the elements present in x but not in y 
    
x = set()
y = set() 
syntax: x.difference(y)

x.difference(y)  or x - y 

x = {10, 20, 30, 40}
y = {30, 50, 40, 60}

print(x.difference(y))
print(x - y)


4. symmetric difference():
x = set()
y = set() 
    
Returns elements present in either x or y but not in both 
syntax: x.symmetric_difference(y)
x.symmetric_difference(y) or x ^ y 

x = {10, 20, 30, 40}
y = {30, 50, 40, 60}

print(x.symmetric_difference(y))
print(x ^ y)


# Membership operation (in , not in)

s = set('sadhana')
print(s) # {s,a,d,h,n} / 

print('a' in s) # True
print('z' in s) # False

print('a' not in s) # False
print('z' not in s) # True


# Set Comprehension 

l = [1, 2, 3, 4, 5] # list 

s = {x * x for x in l}
print(s)


l = [1, 2, 3, 4, 5]
s = set()
for i in l:
    
    print(i * i)
    result = i * i
    s.add(result)
    
print(s)


Q: Write a program to eliminate duplicates present in the list?

l = input("Enter a string") # input always accept string 

s = set(l)
print(s)

l = input("Enter a string: ") # uma sanker 
l1 = []

for i in l:
    if i not in l1:
        l1.append(i)
        
print(l1)     


rng = range(5)
print(rng)
print(type(rng))

l = list(range(5))
print(l)

l2 = list(range(6, 11))
print(l2)

a = dict(zip(l, l2)) 
print(a)

# SET: 
    
set()
add 
update 
remove 
discard 
clear 
in / not in 
union 
intesect 
difference 
sematric difference 


a = {1, 2, 3, 4, 5, 6}
b = {5, 6, 1}

print(a - b)  #


# FORZEN SET: 
    
# set is a mutable : we can change the value 

vowel  = {'a', 'e', 'i', 'o', 'u'}  # set 
print(vowel)
print(type(vowel))
fset = frozenset(vowel)
print(fset)
print(type(fset))


vowel.add('x')
print(vowel)

fset.add('x')
print(fset)

person = {'name': "Sadhan", 'age': "28", 'phone': 42381012351, 'gen': "F"}
print(person)
print(type(person))

pKeys = list(person.keys())
print(list(pKeys))
#print(set(pKeys))

pKeys.append("address")
print(pKeys)


person = {'name': "Sadhan", 'age': "28", 'phone': 42381012351, 'gen': "F"}
fset = frozenset(person)
print(fset)
print(type(fset))

fset.add("address")
print(fset)

fset.update("address")
print(fset)

fset.remove("name")
print(fset)



cnt = {'Alzeria': [44616624,	'Algiers',	'Dinar',	'Africa',	'Arabic;Tamazight;French'],
       '': [],
       '': [],
       .
       .
       .}


# RANGE 
Builtin Function 


Syntax: range(start_value, end_value/stop, step)
1. start_value:optional, it takes  Default value as  [0], we can put any value , start value should be lesser than the end value 
2. end_value / stop : compulsory 
3. step: optional , if step is not available then step will be incremented by 1 if step is avilable then it will increment by the step value 

range(5) # 0 to n-1 [n is end value or stop value] 0, 1, 2, 3, 4 

a = range(5)
print(a)
print(type(a))


a = range(5)
print(set(a))
print(type(a))


# Range function with single Parameter [stop value] 

a = range(-5) # -5 stop range , 0 , 1
print(set(a))  #  -4/ -4,-3,-2,-1, 0 / 0 / None 

a = range(5.2) #  TypeError: 'float' object cannot be interpreted as an integer
print(set(a))

# Range function with 2 parameters

a = range(1, 10) #  1 > starting point and 10 > ending point 
print(set(a))

a = range(-1, -10)
print(set(a)) # 

a = range(-10, 0) 
print(list(a)) 

a = range(-10, -5)
print(list(a))


# 26 AUG 2021
# ---------------------------------------------------------------------------------------------------------
    
#  Three Parameter:
range: 
. range with single parameter 
. range with two parameter 

+number 
-number 

. range with three parameter     

range(start, stop, step) 

start value should be less than stop value 
if we do not provide start value then it will take 0 as start value :

step: optional / default 1 step forward 
if step is negative value then start value should be greater than stop value  

a = range(5)
print(list(a)) # 

a = range(1, 5)
print(list(a)) # 


a = range(1, 10, 2) # 1: start 10: stop 2: step 
print(list(a)) # 1..3..5..7..9 


a = range(1, 10, 3) # 1: start 10 (n-1): stop 3: step 
print(list(a)) # 1...4...7... 
    

a = range(1, 10, -1) # 1: start 10 (n-1): stop -1: step 
print(list(a)) # 

a = range(-5, -1, -1)
print(list(a)) #

a = range(3, -5, -1)
print(list(a)) # 


a = range(1, 5.5, 2)
print(list(a)) # TypeError: 'float' object cannot be interpreted as an integer

a = range(1, 10, 0)
print(list(a)) # ValueError: range() arg 3 must not be zero

a = range(0, 10, 2)
print(tuple(a))
print(type(a))


a = 1 
a = 0 1 2 3 4 5 6 7 8 9 

tuple()
set()
list() 


# Accessing 

a = range(2, 8)
a = list(a)
print(a[3])


# Iteration 

for i in range(0, 10):
    print(i)
    print(type(i))
    


#  Compare 

print(range(5) == range(5))    
print(range(0, 5, 2) != range(0, 5, 3))

print(range(1, 7) == range(1, 7, 2))


# Membership :
in / not in 

a = range(2, 10, 2)
a = list(a)
print(6 in a) # 


a = range(2, 10, 2) # 2 10-1 = 9 
a = list(a)
print(10 in a) #     



# CONCATINATION 

a ='uma' # str
b = 'sanker'  # str 

c = a + b
print(c)

a = 10  # int
b = 20  # int
c = a + b # 30 

a = (1, 2, 3) # tuple
b = (5, 6, 7) # tuple
print(a + b) # 
 
a = [1, 2, 3, 4] # list
b = [5, 6, 7, 8] # list 
print(a + b) # 


a = {1, 2, 3, 4}
b = {5, 6, 7} 
#print(a + b)  # TypeError: unsupported operand type(s) for +: 'set' and 'set'

a.update(b)
print(a)

a = {1:'a', 2:'c'}
b = {1:'b'}
# print(a + b) # 

a.update(b) # if the key is already exists then replave the value of existing key. if key is not available then it will the respected key with value

print(a)


a = {1:'a', 2:'c'} # Dictionary : key:value  key shoudl not be duplicate 
b = {3:'b'}
# print(a + b) # 

a.update(b)
print(a)



a = {1:'a', 2:'c'} # Dictionary : key:value  key shoudl not be duplicate 
b = {3:'c'}
# print(a + b) # 

a.update(b)
print(a)


# Range Concatinarion  

a = range(1, 5)
b = range(6, 10) 


ismail = 


name:  = 'Iamail Baig'
age: 26
phone: 23523464
add: Vyj
gender: M 

uma: 
name:  = 'uma sanker'
age: 26
phone: 23523464
add: Vyj
gender: M 

ismail = ['Iamail Baig', 26, 235234, Vyj, M]
uma = ['uma', 26, 235234, Vyj, M]

ismail = {name: ismail baig, age: 26, phone: 236226, add: Vyj, gen: M}



# Range Concatinarion  

a = range(1, 5)
print(list(a))
a = list(a)
b = range(6, 10) 
print(list(b))
b = list(b)
print(a + b)


from itertools import chain 

rng = chain(range(-5, -1, 2), range(5, 10, 2))
print(list(rng))



Q1: Write a program to give a set of even numbers from 2 to 50 

a = range(2, 50, 2)
print(list(a))

-===========================================================================================================
Date: 27 Aug 2021 
-----------------------------------------------------------------------------------------------------------

# OPERATOR 
. Arithmetic Operator 
. Comparison operator 
. Assignment Operator
. Logical Operator 
. Bitwise Operator (not completed)
. Membership Operator : in , not in 
. Identity Operator : is 

# Data Type 
. Reserve words :
.  

. String 
. Number

 
. Tuples 
. List 
. Dictionary 
. Set 

. Range 

2 Types of Data type:
    
MUTABLE: LIST, DICTIONARY, SET [We can change the value (Add a value)]
IMMUTABLE:  STR, NUM, TUPLE   [We can not change the value (Add a value) ] 

# CONTROL FLOW 

Control flow describe the order in which statements will be executed at runtime 



a = [1, 2, 3, 4, 5] 

a.append(7)

a = []
a.pop() : IndexError: pop from empty list


Control Flow Statement: 
    
    1. Conditional Statement: 
        1. if
        2. if - elif  
        3. if - elif - else 
        
    2. Transfer Statement:
        1. break 
        2. continue 
        3. pass 
    3. Iterative Statement:
        1. for 
        2. while 
        

1. Conditional Statement: 
    
# IF 

syntax: if condition: statement 
syntax: if condition:
            statement 1
            statement 2 
            .
            .
            

# If the condition is True then the statements will be executed 


# Indentation : compulsory 



print('a')
 print('a') # IndentationError: unexpected indent 
 
a =

1   2
1   4


name = input("Enter your name: ")

if name == "uma":
    print("Hello UMA Good Morning")
    
print("How are you!")



name = input("Enter your name ")

if name:
    print(f"Hello {name}")
     
print(f"Hi {name}") 

name = 'a' # True 
name = None # False 



name = input("Enter your name ")

if name:
    print(f"Hello {name}")
    print("How are you")
    print("Where are you from")
    
print(f"Hi {name}") 


name = input("Enter your name ")

if name:
    print(f"Hello {name}")
    print("How are you")
    print("Where are you from")
if name == '':
    print("Please enter your name")
    name = input("Enter your name ")
    
    
print(f"Hi {name}") 


name = input("Enter your name ")

if name: # True
    print(f"Hello {name}")
    print("How are you")
    print("Where are you from")
    
    if len(name) > 5: # True
        print("Your name contain more than 5 chanracter")
    print("Please choose a small name less than 6 character")

        
    
    
print(f"Hi {name}") 

import smtplib

gmail_user = 'x2xcyrus@gmail.com'
gmail_password = 'Sayed08sabeeha'

try:
    server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
    server.ehlo()
    server.login(gmail_user, gmail_password)
except:
    print ('Something went wrong...')


a = 'sayed@live.in'
print(a.split(','))

# IF ELSE:
    

# Ex1
a = input("Enter a single digit number") # 9

if a > 10:
    print("Please give me a single digit number")
    
    if a < 10 :
        print(f"Thank you for choosing {a}")
        
        
    
#  Ex2

a = input("Enter a single digit number: ") # 9

if a.isnumeric():
    
    if int(a) > 10:
        print("Please give me a single digit number")
    
    if int(a) < 10 :
        print(f"Thank you for choosing {a}")
        
    print("We got the number")
        
print("Thak you")
    
    
    
# if..else 

start option :
second option:
    
if: free time 
  then go for the book
  
1 python book 

if python Schand:
    get the book
else:
    other auther book


syntax:

if <condition>:
    statement 
else:
    statement 



auth_name = input("Enter auther name: ") 

if auth_name == 's.chand':
    print("Please buy the book")
else:
    print("buy the book for mininum price")
    
# fstring
# interpolation
# 
# 2 number find the greatest number:
    
fno = int(input("Enter first number: ")) # 32, 43 
sno = int(input("Enter second number: "))

if fno > sno: print(f"the greatest value is {fno} " )
else: print(f"the greatest value is: {sno}")




#  30, 40, 20, 50, 60, 65
# smallest: 20
# greatest: 65

v1 = input("Enter numbers: ")
vl = v1.split(',')
print(max(vl))
print(min(vl))

a = input("Enter two number: ")
l = a.split(',')
if l[0] > l[1]:
    print(f"The greates value is: {l[0]}")
    print(f"The smallest value is: {l[1]}")
    
else:
    print(f"The greates value is: {l[1]}")
    print(f"The smallest value is: {l[0]}")
    
    
# if-elif:
    
uma: s.chand / rima

if book_auther== s.chand then 
        get the book 

elif book_autehr == rima then :
        get the book 

elif book_auther == 'pearson':
    get the book    
    
if condiotn1:
    action 1
elif condition2:
    action 2
elif condition3:
    action 3
    

brand = input("Enter your fav car brand: ")

if brand == 'bmw' or brand == 'audi':
    print("Awsome chose")
elif brand == 'audi':
    print('wanderfull')
elif brand == 'toyota':
    print("this a thril box ")
elif brand == 'maruti':
    print('purchasing a tin can')
elif brand == 'tata':
    print("buying a iron box")
    
if brand == 'audi':
    print('wanderfull')    




brand = input("Enter your fav car brand: ")

if brand == 'bmw' or brand == 'audi':
    print("Awsome chose")
elif brand == 'audi':
    print('wanderfull')
elif brand == 'toyota':
    print("this a thril box ")
elif brand == 'maruti':
    print('purchasing a tin can')
elif brand == 'tata':
    print("buying a iron box")
else:
    print("Please choose wisely")  
    
if brand == 'audi':
    print('wanderfull')  
else:
    print("what a chose sir")



if
if-if
if-else
if-elif 
if-elif-else

Q: write a prograam to check wheather the given number is in between 1 and 100 

a = int(input("Enter a number! "))

if a <=100 and a > 0:
    print("The number is in between 1 and 100")
else:
    print("The number is out of range")
    
    

--------------------------------------------------------------------------------------------------------
Date: 09 Sep 2021 
--------------------------------------------------------------------------------------------------------
# unpacking 

t = 1, 2, 3

a, b, c = t 

print(a, b, c)

a = 'acer'
c, d = a # ValueError: too many values to unpack (expected 2)

c, d, e, f = a 
print(c, d, e, f) # a, c, e, r


n = input("Enter a two digit number: ") # 2

a, *b = n 
print(a)
print(b)
print(int(a) + int(sum(b)) )

# extended unpack 

a = [3, 4, 5]
print(sum(a))
*

n = 1, 2, 3, 4, 5

#v1, v2 = 1, 2, 3, 4, 5 
v1 = n[0]
v2 = n[1:]

v1, *v2 = n

print(v1, v2)


l = [2, 3, 4, 5, 6]
a, *b, c = l 
print(a, b, c)


l1 = [2, 3, 4, 5]
l2 = [7, 8, 9]

l = l1 + l2 
print(l)

l1.extend(l2)
print(l1)


# LOOPING 

num1 = int(input("Enter first number"))
num2 = int(input("Enter second number"))

if num1 > num2:
    print(f"{num1} is greatest number")
else:
    print(f"{num2} is greatest number")
    

LOOP 

difinite loop :
    when we know how many number if of times the statement will execute 

indefinite loop:
    
    
while:

for: 
    
# difinite loop 



# While: 
    
condition: True 
    statement 1
    statement 2
    statement 3
    .
    .
    

 # syntax: 
    
while expression/condition:
    statements 
    .
    .
    
print(1)
print(2)
print(3)
print(4)
print(5)

count = 1 

while count:
    print(count+1)
    print(count +1)
    count = False 


count = 1 

while count <=5: # False 
    print(count) # 1 , 2, 3, 4, 5
    count += 1   # 6
    
    
# indifinite loop

flag = True 

while flag:
    a = int(input("Enter first number: "))
    b = int(input("Enter second number: "))
    
    if a > b:
        print(f"{a} is the greatest value")
    else:
        print(f"{b} is the greatest value")
        
    print("Do you want to run this one more time:>")
    u_input = input("Please choose[yes/no]")
    if u_input.lower() == 'no':
        flag = False 
        

 
# For statement / loop 


Iteratable : strin, tuple, list, dic, set , range() 


syntax:
    
for iterating var / var in sequence/ iteratble item:
    
    

l = ['a', 'b', 'c', 'd', 'e', 'f', 'g']

for i in l:
    print(i)

 
l = ['a', 'b', 'c', 'd', 'e', 'f', 'g']    
v = 0

while v < len(l):
    print(l[v])
    v = v+1
    


l = list("1234")
l[0] = l[1] = 5
print(l)     
    
    
a = int(input("enter a number: "))

if a > 10:
    None 
elif a > 10 and a < 100:
    print("thnaks")
else:
    print("try again")

    
user input = A4Z2C7F19XB 

ABCFXZ12479

a = input("Enter Alphanumeric value: ")

c1 = n1 = output = ''

for x in a:
    if x.isalpha():
        c1 = c1 + x 
    else:
        n1 = n1 + x
for i in sorted(c1):
    output = output + i 
for i in sorted(n1):
    output = output + i
        
    
        
print(c1, n1)
print(output)
        
    

user input = Vsoft Technologis 
out = tfosV sigolnhceT 

a = input("Enter string: ")

l = a.split() # ['Vsoft', 'Technologis', ...]
l1 = []
i = 0

while i < len(l):
    l1.append(l[i][::-1])
    i = i+1
    
output = ' '.join(l1) 
print(output) 





a = 'Vsoft Technologis'
print(a[::])
print(a[::-1])



s1 = "ravi"
s2 = "joshas"

output: rjaovsihas 

a = sadhana
b = behera
o = sbaedhhearnaa 

    
s1 = input("Enter first string: ")
s2 = input ("Enter second string: ")

output = ''

i,j = 0, 0

while i < len(s1) or j < len(s2): #7 6 True or True : True / True or False : True 
    if i < len(s1):
        output = output + s1[i]
        i = i + 1
    if j < len(s2):
        output = output + s2[j]
        j = j + 1
        
print(output) 
   
------------------------------------------------------------------------------------------------------------
                                                     17 Sep 2021
----------------------------------------***********************************---------------------------------
Loop: 2 
1. Definite 
2. Indefinite

base 

while 
for 

while : Indefinite 
for : Definite 
 
# FOR LOOP 
If we want to execute action/statement  for every element present in some sequence 
then we should go for for loop. 

sequence : range of value / number 

1, 2, 3, 4 
a, b, c, d, 

string: 'umasanker'

hight: 
    4.8
    4.9 
    5.6 
    
iterable data type : string / list / tuple / set / dic 


# FOR LOOP SYNTAX: 

    
for <variable> in sequence [itarable data type] :
    statement 
    
    
Sequence : can be any string or any collection data. Body will be execute for 
every element present in the sequence.    
   

s = 'uma shanker'

for i in s:
    print(i)
    

s = input("Enter your name: ") # 
i = 0 
for x in s:
    print("The character present at ", i , "index:", x)
    i = i + 1 
    
    
# TO print uma 10 times 

for x in range(10):
    print("Hello")

    
for x in range(11):
    print(x)    
 
find odd number in between 0 to 20

for x in range(21):
    if x % 2 !=0:
        print("Odd number: ", x)
        
# Display number from 10 to 1 in descending order.

for x in range(10, 0, -1):
    print(x)



# Print sum of numbers present inside a list 
 [10, 30, 50, 10] # 100

a = input("Enter numbers")
l = a.split(',')

sum_ = 0
for i in l:
    sum_ = sum_ + int(i) 
    
print(sum_)
 

a = '10,20,30'
a = list(a)
print(a) # 1, 0, , , 2, 0 

------------------------------------------------------------------------------------------------------------

                                            20 Sep 2021
------------------------------************************************------------------------------------------

# 
user_input = [3, 5, 8, 0] # string 
check if the list contain any zero .


user_input = input("Enter a list of number: ")
flag = False # initialy consider that there is no zero in user input 
a = user_input.split(',')

for i in a: # 0
    if int(i )== 0:
        flag = True 
        
if flag:
    print("Sorry there is zero in in the list")
else:
    print("We are processing this.")
    

user_input = input("Enter a list of number: ")

a = user_input.split(',')

if '0' in a:
    print("sorry")
else:
    print("Yes")


a = 1 
b = '1'

print(type(a))
print(type(b))

if a == b:
    print("Yes")
else:
    print("No")



# While Loop: 
    
if we want to execute a group of statements iteratively until some condition is false, the we slould go for while loop  :
    

syntax: 

    while <condition>:
        statement1
        statement2 
     
    

# To print number from 1 to 10 

x = 1 

while x <= 10:
    print(x)
    x = x + 1 
    

# Display the sum of first n numbers:

n = 10  

1+2+3+4+...+10

sum1 = 0 
i = 1 
while i<=10:
    sum1 = sum1 + i 
    i = i+1 

print(sum1)    

user_input = int(input("Enter a number"))

total = 0 
i = 1
while i <=  user_input:
    total = total + i
    i = i + 1 
    
print(total)


# Write a program to prompt user input to enter some name until entries Tanjima 

name = input("Enter your name: ")

if name == 'Tanjima':
    print("Welcome")
else:
    print("Sorry wrong name")
    

name = input("Enter your name: ")

flag = True 

while flag:
    if name == 'Tanjima':
        print("Welcome")
        flag = False 
    else:
        print("invalid name")
        name = input("Enter your name: ")
        


name = '' # Uma 

while name !='Tanjima': # 'sadhana' True 
    name = input("Enter your name: ") # Tanjima

print("Welcome")
    

------------------------------------------------------------------------------------------------------------

                                            21 Sep 2021
------------------------------************************************------------------------------------------
s = input("Ener a string:")

for i in range(len(s)):
    print(f"positive index {i}, negative index { (len(s) - i) * -1} | Value: {s[i]}")
    
a = 'sayed'
print(a[0])
print(a[-5])

# 

usr_input = "uma"

output: 
    positive index [0] negative index [-3] | value: [u]
    positive index [1] negative index [-2] | value: [m]
    positive index [2] negative index [-1] | value: [a]
    
    

user_input = input("Enter a string: ")

for i in range(len(user_input)):
    print(f"positive index {i} negative index {( len(user_input) - i ) *-1 } | value: {user_input[i]}")

# INFINITY LOOPS: 

    
a = '' # None
while a != 'uma': # '' != uma # True 
    input("enter your name") # sadhana 


print(name)

a = 'uma'

while a:
    print(a)
    

# Nested Loop: 
    
If we take a loop inside another loop, then this will be called as nested loop.

syntax: 
    
for <variable> in <iterative value>:
    statement_1
    for <variable> in <iterative value>:
        statement_1
        statement_2
    

while <condition>:
    statemnt_1 
    while <condition>:
        statement_1
        statement_2 
        
    


for i in range(4): # 0, 1, 2, 3
    for j in range(4): # 0, 1, 2, 3
        print(f"i={i}  j={j}")
              
              
cartesian product 

1   4 5 6
2   4 5 6
3   4 5 6           
        
ui = 4
# 

*
* *
* * * 
* * * *

n = int(input("Enter a number: "))

for i in range(1, n+1): # 1 to n-1
    for j in range(1, i+1):
        print("*", end = ' ')
    print()
    


n = int(input("Enter a number: "))
for i in range(1, n+1): # 1, 2, 3, 4
    print('* ' * i)
    
    







# 
ui = 4

          *
         * *
        * * *
       * * * *
       

n = int(input("Enter a number: ")) 

for i in range(1, n+1):
    print(' ' * (n-i), end='' ) 
    print('* ' * i)


#  Transfer statement :

1. Break 
2. continue 
else 
3. Pass 

------------------------------------------------------------------------------------------------------------

                                            22 Sep 2021
------------------------------************************************------------------------------------------     
       
 
# Transfer Statement: 

    
1. Break 
2. Continue 
3. Pass 

# Break 

Loop 

while 

for 


condition statement 

# When we use break statement inside loops to break loop execution based on some condition 

for <variable> in <iterable>:
    if <condition>:
        statement 
    elif <condition>:
        break 
    else:
        statement 



for i in range(1, 9): # 1..8
    if i  < 6:
        print("Uma Please continue your office work")
    elif i == 7:
        print("Today is sunday")
        break 
    else:
        print("Uma today is half day")



for i in range(10): # 0-9
    if i == 7:
        print("You have worked very hard take a break")
        break 
    print(i)




for i in range(10): # 0-9
    if i == 7:
        print("You have worked very hard take a break")
        break 
    print(i)
    
print("Hi uma")


# loan 

bajab finance bard: 

100000 

if item > 50000: stop {pan varify} 


item = [100, 300, 500, 60000, 4000, 10000, 25000 ]

for i in item:
    if i > 50000:
        print("Sorry we can not process this you have to verify Pan")
        break 
    else:
        print(f"Processing..{i}")

        
# Continue 

# We can use continue statement to skip current iteration and continue next iteration 

for i in range(10):
    if i % 2 == 0: 
        print("Print nothing")
        continue 
        print("Continue Loop")
    
    print(i) # 10 
    
# 
0
1
PN
2
3
PN
4

item = [100, 300, 500, 60000, 4000, 10000, 25000 ]

for i in item:
    if i > 50000:
        print("Sorry we can not process this you have to verify Pan")
        continue 
    
    print(f"Processing..{i}")
    
    

marks = [70, 80, 0, 50, 0, 30]

for i in marks:
    if i == 0:
        print("Hey how can we divide with zero.. just skipping")
        continue 
    print(f"{100 // i } ")
    


# LOOPS WOITH ELSE BLOCK 

inside loop execution, if break statement not executed, then only else part will be executed. 

else means loop without break 

    
cart = [10, 20, 30, 40, 50]

for i in cart:
    if i >=500:
        print("We can not process this order")
        break 
    print("Item processing.. ", i)
    
else:
    print("Congrats.. all items are processed successfully.")
    
 
cart = [10, 20, 30, 600, 40, 50]

for i in cart:
    if i >=500:
        print("We can not process this order")
        break 
    print("Item processing.. ", i)
    
else:
    print("Congrats.. all items are processed successfully.")    

    
    
cart = [10, 20, 30, 600, 40, 50]

for i in cart:
    if i >=500:
        print("We can not process this order")
        continue 
    print("Item processing.. ", i)
    
else:
    print("Congrats.. all items are processed successfully.")          


# PASS 


for i in range(10):
    pass 

print("Hello")

def adds(number1, number2):
    pass 


adds(10, 30)


parent calss 
    def asbtract m1():
        
chiuld class inharit parent calss 
    def m1():
        body 
        

uma PAPA (business) # Job 

uma : business # start business 


Q: what is the difference between for loop and while loop 
Q: how many types of loop we can create 
Q: How to exit from the loop 
Q: How to skip some iteration inside a loop 
Q: when else part will be execute in loops 


         
 ------------------------------------------------------------------------------------------------------------

                                            29 Sep 2021
------------------------------************************************------------------------------------------ 

# del statement:

if 
if else 
infinit loop 
    
data type 
    . number 
    . string 
    . tuple 
    . list 
    . dictionary 
    . set 
    
conditional statement 
if 

if else:
    
if 
elif 
else 

looping 
for loop :

while loop: 
    
. Transfer / control statement 
. break 
. continue 
. else 
. pass

del 
-------------

x = 10 
print(x)
del x 
print(x)

a = 'uma sanker'
del a[0] # TypeError: 'str' object doesn't support item deletion
print(a)
del a
print(a)

a = ['uma', 'sadhana', 'tanjima']
del a[0]
print(a)

del a 
print(a)


a = 10 

del a 

a = None


#  String 

any sequence of character within either single quote or double quote is consider as a string.

syntax: 
a = "uma" # string 
b = 'uma' # string 
c = "10" # string 
d = "10.5" # string 
    
print(type(a))    

a = """
uma 
sanker 
palai 
"""

print(a)

a = " uma \
    sanker \
        palai"
        
print(a)




a = "uma sanker palai"

# How to access character of a string 

we can access characters of a string by using two ways:

1. by using index 
2. by using slicing operator 

index can be positive or negative 

a = "uma sanker palai"

print(a[5])

# Q: Write a program to accept string from the 
# keyboard and didplay its characters by index wise(both positive and negative index)

a = "u m a s a n k e r "
     0
    -10
     
     
output: positive index: 0 and negative index: -10 | value: u 
        positive index: 1 and negative index: -9  | value: m 


name = input("Enter your name: ")

for i in range(0, len(name)):
    print(f"positive index: {i} and negative index: {(len(name)-i) * -1} | value: {name[i]} ")
    
    
# Slicing Operater: 
    
value_name[begining_index:end_index:step] 

a = "uma sanker palai"

print(a[4:10:1])

print(a[::-1])


# len() 


# 
















































































    
 

























































    

























    

    









    



    

            

    
       













































 










































    













    






    
    











    
 


